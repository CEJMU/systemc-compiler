//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);


//------------------------------------------------------------------------------

A a_mod
(

);

endmodule



//==============================================================================
//
// Module: A (test_simple_method3.cpp:155:5)
//
module A // "b_mod.a_mod"
(
);

// SystemC signals
logic [1:0] sig;

//------------------------------------------------------------------------------
// Method process: record_meth0 (test_simple_method3.cpp:55:5) 

// Process-local variables
logic s_a[2];

always_comb 
begin : record_meth0     // test_simple_method3.cpp:55:5
    logic par;
    logic [1:0] i;
    par = 0;
    // Call setA() begin
    s_a[0] = par;
    // Call setA() end
    par = 1;
    // Call setA() begin
    s_a[0] = par;
    // Call setA() end
    i = sig;
    par = 0;
    // Call setA() begin
    s_a[i] = par;
    // Call setA() end
end

//------------------------------------------------------------------------------
// Method process: record_meth1 (test_simple_method3.cpp:70:5) 

// Process-local variables
logic s_a[2];

always_comb 
begin : record_meth1     // test_simple_method3.cpp:70:5
    logic par;
    logic TMP_0;
    logic b;
    logic [1:0] i;
    logic TMP_2;
    par = 1;
    // Call setA() begin
    s_a[1] = par;
    // Call setA() end
    // Call getA() begin
    TMP_0 = s_a[1];
    // Call getA() end
    b = TMP_0;
    i = sig;
    par = 1;
    // Call setA() begin
    s_a[i] = par;
    // Call setA() end
    // Call getA() begin
    TMP_2 = s_a[i];
    // Call getA() end
    b = TMP_2;
end

//------------------------------------------------------------------------------
// Method process: record_meth2 (test_simple_method3.cpp:88:5) 

// Process-local variables
logic s_a[2];

always_comb 
begin : record_meth2     // test_simple_method3.cpp:88:5
    logic b;
    logic par;
    b = 0;
    for (integer i = 0; i < 2; i++)
    begin
        par = |i;
        // Call setA() begin
        s_a[i] = par;
        // Call setA() end
        b = 0;
    end
end

//------------------------------------------------------------------------------
// Method process: record_meth2a (test_simple_method3.cpp:103:5) 

// Process-local variables
logic s_a[2];

always_comb 
begin : record_meth2a     // test_simple_method3.cpp:103:5
    logic b;
    logic par;
    logic TMP_0;
    b = 0;
    for (integer i = 0; i < 2; i++)
    begin
        par = |i;
        // Call setA() begin
        s_a[i] = par;
        // Call setA() end
        // Call getA() begin
        TMP_0 = s_a[i];
        // Call getA() end
        b = b || TMP_0;
    end
end

//------------------------------------------------------------------------------
// Method process: record_meth3 (test_simple_method3.cpp:113:5) 

// Process-local variables
logic s_a[2];

always_comb 
begin : record_meth3     // test_simple_method3.cpp:113:5
    logic TMP_0;
    logic par;
    logic l;
    logic b;
    logic [1:0] i;
    logic TMP_2;
    par = 1;
    // Call localVar() begin
    l = 1;
    TMP_0 = l;
    // Call localVar() end
    b = TMP_0;
    i = sig;
    par = 1;
    // Call localVar() begin
    l = par || s_a[i];
    TMP_2 = l;
    // Call localVar() end
    b = TMP_2;
end

//------------------------------------------------------------------------------
// Method process: record_multi_calls (test_simple_method3.cpp:134:5) 

// Process-local variables
logic s_a[2];

always_comb 
begin : record_multi_calls     // test_simple_method3.cpp:134:5
    logic [1:0] i;
    logic TMP_0;
    logic par;
    logic l;
    logic b;
    integer TMP_2;
    integer par_1;
    integer l_1;
    integer j;
    logic par_2;
    integer TMP_4;
    integer TMP_6;
    i = sig;
    par = 1;
    // Call localVar() begin
    l = par || s_a[i];
    TMP_0 = l;
    // Call localVar() end
    b = TMP_0;
    par_1 = 4;
    // Call f() begin
    l_1 = par_1 + 1;
    TMP_2 = l_1;
    // Call f() end
    j = TMP_2;
    par_2 = |i;
    // Call setA() begin
    s_a[i] = par_2;
    // Call setA() end
    par_1 = 5;
    // Call f() begin
    l_1 = par_1 + 1;
    TMP_4 = l_1;
    // Call f() end
    par_2 = |TMP_4;
    // Call setA() begin
    s_a[i + 1] = par_2;
    // Call setA() end
    par_1 = 6;
    // Call f() begin
    l_1 = par_1 + 1;
    TMP_6 = l_1;
    // Call f() end
end

endmodule


