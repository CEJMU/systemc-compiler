//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a"
(
    input logic clk
);

// SystemC signals
logic rstn;

//------------------------------------------------------------------------------
// Clocked THREAD: record_assign1 (test_assign_concat_cthread.cpp:37:5) 

// Thread-local variables
logic s_a;
logic s_a_next;
logic signed [31:0] s_b;
logic signed [31:0] s_b_next;

// Next-state combinational logic
always_comb begin : record_assign1_comb     // test_assign_concat_cthread.cpp:37:5
    record_assign1_func;
end
function void record_assign1_func;
    logic r_a;
    integer r_b;
    s_a_next = s_a;
    s_b_next = s_b;
    r_a = s_a_next; r_b = s_b_next;
    r_a = s_a_next; r_b = s_b_next;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_assign1_ff
    if ( ~rstn ) begin
        s_a <= 1;
        s_b <= 42;
    end
    else begin
        s_a <= s_a_next;
        s_b <= s_b_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: record_assign2 (test_assign_concat_cthread.cpp:52:5) 

// Next-state combinational logic
always_comb begin : record_assign2_comb     // test_assign_concat_cthread.cpp:52:5
    record_assign2_func;
end
function void record_assign2_func;
    logic s_a;
    integer s_b;
    logic r_a;
    integer r_b;
    r_a = s_a; r_b = s_b;
    s_a = r_a; s_b = r_b;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_assign2_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: record_assign3 (test_assign_concat_cthread.cpp:67:5) 

// Thread-local variables
logic t_a;
logic t_a_next;
logic signed [31:0] t_b;
logic signed [31:0] t_b_next;
logic v_a;
logic v_a_next;
logic signed [31:0] v_b;
logic signed [31:0] v_b_next;

// Next-state combinational logic
always_comb begin : record_assign3_comb     // test_assign_concat_cthread.cpp:67:5
    record_assign3_func;
end
function void record_assign3_func;
    logic w_a;
    integer w_b;
    t_a_next = t_a;
    t_b_next = t_b;
    v_a_next = v_a;
    v_b_next = v_b;
    w_a = t_a_next; w_b = t_b_next;
    t_a_next = v_a_next; t_b_next = v_b_next;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_assign3_ff
    if ( ~rstn ) begin
        t_a <= 1;
        t_b <= 42;
        v_a = t_a; v_b = t_b;
    end
    else begin
        t_a <= t_a_next;
        t_b <= t_b_next;
        v_a <= v_a_next;
        v_b <= v_b_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: record_concat_reg (test_assign_concat_cthread.cpp:81:5) 

// Thread-local variables
logic x_a;
logic x_a_next;
logic signed [31:0] x_b;
logic signed [31:0] x_b_next;

// Next-state combinational logic
always_comb begin : record_concat_reg_comb     // test_assign_concat_cthread.cpp:81:5
    record_concat_reg_func;
end
function void record_concat_reg_func;
    logic y_a;
    integer y_b;
    x_a_next = x_a;
    x_b_next = x_b;
    y_b = {1'(x_a_next), 2'(x_b_next)};
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_concat_reg_ff
    if ( ~rstn ) begin
        x_b <= 42;
    end
    else begin
        x_a <= x_a_next;
        x_b <= x_b_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: record_concat_comb (test_assign_concat_cthread.cpp:94:5) 

// Next-state combinational logic
always_comb begin : record_concat_comb_comb     // test_assign_concat_cthread.cpp:94:5
    record_concat_comb_func;
end
function void record_concat_comb_func;
    logic z_a;
    integer z_b;
    logic f_a;
    integer f_b;
    f_b = 42;
    z_b = {1'(f_a), 2'(f_b)};
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_concat_comb_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

endmodule


