//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);


//------------------------------------------------------------------------------

test_sens_arrays t0
(

);

test_sens_arrays t1
(

);

test_sens_arrays t2
(

);

endmodule



//==============================================================================
//
// Module: test_sens_arrays (test_sensitive_keep_arrays.cpp:53:5)
//
module test_sens_arrays // "top_inst.t0"
(
);

// SystemC signals
logic clk;
logic sigs[3];
logic ins[3];

assign ins = sigs;

//------------------------------------------------------------------------------
// Method process: method0 (test_sensitive_keep_arrays.cpp:33:5) 

always_comb 
begin : method0     // test_sensitive_keep_arrays.cpp:33:5
end

//------------------------------------------------------------------------------
// Method process: method1 (test_sensitive_keep_arrays.cpp:37:5) 

always_comb 
begin : method1     // test_sensitive_keep_arrays.cpp:37:5
end

//------------------------------------------------------------------------------
// Method process: method2 (test_sensitive_keep_arrays.cpp:41:5) 

always_comb 
begin : method2     // test_sensitive_keep_arrays.cpp:41:5
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_thread (test_sensitive_keep_arrays.cpp:45:5) 

// Next-state combinational logic
always_comb begin : test_thread_comb     // test_sensitive_keep_arrays.cpp:45:5
    test_thread_func;
end
function void test_thread_func;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge ins[2]) 
begin : test_thread_ff
    if ( ~ins[2] ) begin
    end
    else begin
    end
end

endmodule


