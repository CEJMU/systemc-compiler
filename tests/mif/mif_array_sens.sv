//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.6
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic [31:0] t;
logic [31:0] minst_s1[2];
logic [31:0] minst_s2[2];
logic [31:0] minst_s3[2];
logic [31:0] minst_r[2];

// Local parameters generated for C++ constants
localparam logic minst_0_A = 1;
localparam logic minst_0_B = 1;

//------------------------------------------------------------------------------
// Method process: top_method1 (test_mif_array_sens.cpp:93:5) 

always_comb 
begin : top_method1     // test_mif_array_sens.cpp:93:5
    integer unsigned i;
    i = t;
    // Call f1() begin
    minst_s1[i] = 1;
    // Call f1() end
end

//------------------------------------------------------------------------------
// Method process: top_method2 (test_mif_array_sens.cpp:98:5) 

always_comb 
begin : top_method2     // test_mif_array_sens.cpp:98:5
    integer unsigned i;
    i = t;
    if (minst_0_B)
    begin
        minst_s2[i] = 1;
    end else begin
        minst_s2[i] = minst_r[i];
    end
end

//------------------------------------------------------------------------------
// Method process: top_method2_bug (test_mif_array_sens.cpp:109:5) 

always_comb 
begin : top_method2_bug     // test_mif_array_sens.cpp:109:5
    integer unsigned i;
    i = t;
    // Call f2() begin
    if (minst_0_B[i])
    begin
        minst_s2[i] = 1;
    end else begin
        minst_s2[i] = minst_r[i];
    end
    // Call f2() end
end

//------------------------------------------------------------------------------
// Method process: top_method3 (test_mif_array_sens.cpp:114:5) 

always_comb 
begin : top_method3     // test_mif_array_sens.cpp:114:5
    integer unsigned i;
    i = t;
    // Call f3() begin
    if (1)
    begin
        minst_s3[i] = 1;
    end else begin
        minst_s3[i] = minst_r[i];
    end
    // Call f3() end
end

endmodule


