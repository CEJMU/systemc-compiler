//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
    input logic clk
);

// SystemC signals
logic a;
logic b;


//------------------------------------------------------------------------------

A a_mod
(
  .clk(clk),
  .a(a),
  .b(b)
);

endmodule



//==============================================================================
//
// Module: A (test_bool.cpp:102:5)
//
module A // "b_mod.a_mod"
(
    input logic clk,
    input logic a,
    output logic b
);

// SystemC signals
logic rstn;

//------------------------------------------------------------------------------
// Clocked THREAD: test_ptr_comp (test_bool.cpp:52:5) 

// Thread-local variables
logic signed [31:0] p;
logic signed [31:0] p_next;

// Next-state combinational logic
always_comb begin : test_ptr_comp_comb     // test_bool.cpp:52:5
    test_ptr_comp_func;
end
function void test_ptr_comp_func;
    logic b_1;
    p_next = p;
    b_1 = 1;
    b_1 = 0;
    b_1 = 0;
    b_1 = 1;
    b_1 = 0;
    b_1 = 1;
    b_1 = 0;
    b_1 = 1;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : test_ptr_comp_ff
    if ( ~rstn ) begin
    end
    else begin
        p <= p_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_ptr_to_bool (test_bool.cpp:73:5) 

// Thread-local variables
logic signed [31:0] p2;
logic signed [31:0] p2_next;

// Next-state combinational logic
always_comb begin : test_ptr_to_bool_comb     // test_bool.cpp:73:5
    test_ptr_to_bool_func;
end
function void test_ptr_to_bool_func;
    integer unsigned i;
    p2_next = p2;
    if (1)
    begin
        i = 1;
    end
    if (1)
    begin
        i = 2;
    end
    if (1)
    begin
        i = 3;
    end
    if (1)
    begin
        i = 4;
    end
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : test_ptr_to_bool_ff
    if ( ~rstn ) begin
    end
    else begin
        p2 <= p2_next;
    end
end

endmodule


