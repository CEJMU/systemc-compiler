//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// SystemC signals
logic nrst;
logic signed [31:0] s;

//------------------------------------------------------------------------------
// Clocked THREAD: top_thread0 (test_fcall_in_reset.cpp:40:5) 

// Next-state combinational logic
always_comb begin : top_thread0_comb     // test_fcall_in_reset.cpp:40:5
    top_thread0_func;
end
function void top_thread0_func;
    integer TMP_0;
    integer F;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge nrst) 
begin : top_thread0_ff
    if ( ~nrst ) begin
        integer TMP_0;
        integer F;
        integer i;
        // Call g() begin
        F = s;
        TMP_0 = F + 1;
        // Call g() end
        i = TMP_0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: top_thread1 (test_fcall_in_reset.cpp:51:5) 

// Thread-local variables
logic signed [31:0] k;
logic signed [31:0] k_next;

// Thread-local constants
logic signed [31:0] cs;
logic signed [31:0] c;

// Next-state combinational logic
always_comb begin : top_thread1_comb     // test_fcall_in_reset.cpp:51:5
    top_thread1_func;
end
function void top_thread1_func;
    integer TMP_0;
    integer TMP_2;
    integer j;
    k_next = k;
    j = c / cs + k_next;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge nrst) 
begin : top_thread1_ff
    if ( ~nrst ) begin
        integer TMP_0;
        integer TMP_2;
        // Call f() begin
        TMP_0 = 42;
        // Call f() end
        c = TMP_0;
        // Call f() begin
        TMP_2 = 42;
        // Call f() end
        cs = TMP_2 - 1;
        k <= c % cs;
    end
    else begin
        k <= k_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: top_thread2 (test_fcall_in_reset.cpp:66:5) 

// Thread-local variables
logic signed [31:0] i;
logic signed [31:0] i_next;
logic signed [31:0] j;
logic signed [31:0] j_next;
logic top_thread2_PROC_STATE;
logic top_thread2_PROC_STATE_next;

// Thread-local constants
logic signed [31:0] c0;
logic signed [31:0] cs0;

// Next-state combinational logic
always_comb begin : top_thread2_comb     // test_fcall_in_reset.cpp:66:5
    top_thread2_func;
end
function void top_thread2_func;
    integer TMP_0;
    i_next = i;
    j_next = j;
    top_thread2_PROC_STATE_next = top_thread2_PROC_STATE;
    
    case (top_thread2_PROC_STATE)
        0: begin
            j_next = c0 + i_next;
            top_thread2_PROC_STATE_next = 1; return;    // test_fcall_in_reset.cpp:77:13;
        end
        1: begin
            j_next = j_next + cs0;
            j_next = c0 + i_next;
            top_thread2_PROC_STATE_next = 1; return;    // test_fcall_in_reset.cpp:77:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge nrst) 
begin : top_thread2_ff
    if ( ~nrst ) begin
        integer TMP_0;
        // Call f() begin
        TMP_0 = 42;
        // Call f() end
        i <= TMP_0;
        c0 = s;
        cs0 = 42;
        top_thread2_PROC_STATE <= 0;    // test_fcall_in_reset.cpp:72:9;
    end
    else begin
        i <= i_next;
        j <= j_next;
        top_thread2_PROC_STATE <= top_thread2_PROC_STATE_next;
    end
end

endmodule


