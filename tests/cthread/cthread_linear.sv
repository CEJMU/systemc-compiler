//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;
logic signed [31:0] out;

//------------------------------------------------------------------------------
// Clocked THREAD: test_simple_thread2 (test_cthread_linear.cpp:44:5) 

// Thread-local variables
logic signed [31:0] out_next;
logic signed [31:0] i;
logic signed [31:0] i_next;
logic [1:0] test_simple_thread2_PROC_STATE;
logic [1:0] test_simple_thread2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_simple_thread2_comb     // test_cthread_linear.cpp:44:5
    test_simple_thread2_func;
end
function void test_simple_thread2_func;
    i_next = i;
    out_next = out;
    test_simple_thread2_PROC_STATE_next = test_simple_thread2_PROC_STATE;
    
    case (test_simple_thread2_PROC_STATE)
        0: begin
            out_next = 1 + i_next;
            test_simple_thread2_PROC_STATE_next = 1; return;    // test_cthread_linear.cpp:52:13;
        end
        1: begin
            out_next = 2;
            i_next++;
            test_simple_thread2_PROC_STATE_next = 2; return;    // test_cthread_linear.cpp:55:13;
        end
        2: begin
            out_next = 1 + i_next;
            test_simple_thread2_PROC_STATE_next = 1; return;    // test_cthread_linear.cpp:52:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_simple_thread2_ff
    if ( ~arstn ) begin
        i <= 0;
        out <= 0;
        test_simple_thread2_PROC_STATE <= 0;    // test_cthread_linear.cpp:48:9;
    end
    else begin
        out <= out_next;
        i <= i_next;
        test_simple_thread2_PROC_STATE <= test_simple_thread2_PROC_STATE_next;
    end
end

endmodule


