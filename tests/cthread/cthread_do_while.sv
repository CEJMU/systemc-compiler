//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;
logic signed [31:0] out;
logic signed [31:0] in;

//------------------------------------------------------------------------------
// Clocked THREAD: dowhile_with_wait0 (test_do_while.cpp:41:5) 

// Thread-local variables
logic signed [31:0] out_next;
logic signed [31:0] i;
logic signed [31:0] i_next;
logic dowhile_with_wait0_PROC_STATE;
logic dowhile_with_wait0_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : dowhile_with_wait0_comb     // test_do_while.cpp:41:5
    dowhile_with_wait0_func;
end
function void dowhile_with_wait0_func;
    i_next = i;
    out_next = out;
    dowhile_with_wait0_PROC_STATE_next = dowhile_with_wait0_PROC_STATE;
    
    case (dowhile_with_wait0_PROC_STATE)
        0: begin
            i_next = 0;
            out_next = 1;
            dowhile_with_wait0_PROC_STATE_next = 1; return;    // test_do_while.cpp:51:17;
        end
        1: begin
            i_next++;
            if (i_next < 3)
            begin
                out_next = 1;
                dowhile_with_wait0_PROC_STATE_next = 1; return;    // test_do_while.cpp:51:17;
            end
            out_next = 2;
            i_next = 0;
            out_next = 1;
            dowhile_with_wait0_PROC_STATE_next = 1; return;    // test_do_while.cpp:51:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : dowhile_with_wait0_ff
    if ( ~arstn ) begin
        out <= 0;
        dowhile_with_wait0_PROC_STATE <= 0;    // test_do_while.cpp:44:9;
    end
    else begin
        out <= out_next;
        i <= i_next;
        dowhile_with_wait0_PROC_STATE <= dowhile_with_wait0_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: dowhile_with_wait1 (test_do_while.cpp:60:5) 

// Thread-local variables
logic signed [31:0] out_next0;
logic signed [31:0] i0;
logic signed [31:0] i_next0;
logic [1:0] dowhile_with_wait1_PROC_STATE;
logic [1:0] dowhile_with_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : dowhile_with_wait1_comb     // test_do_while.cpp:60:5
    dowhile_with_wait1_func;
end
function void dowhile_with_wait1_func;
    i_next0 = i0;
    out_next0 = out;
    dowhile_with_wait1_PROC_STATE_next = dowhile_with_wait1_PROC_STATE;
    
    case (dowhile_with_wait1_PROC_STATE)
        0: begin
            i_next0 = 0;
            i_next0++;
            out_next0 = 1;
            dowhile_with_wait1_PROC_STATE_next = 1; return;    // test_do_while.cpp:71:17;
        end
        1: begin
            if (i_next0 < 3)
            begin
                i_next0++;
                out_next0 = 1;
                dowhile_with_wait1_PROC_STATE_next = 1; return;    // test_do_while.cpp:71:17;
            end
            out_next0 = 2;
            dowhile_with_wait1_PROC_STATE_next = 2; return;    // test_do_while.cpp:74:13;
        end
        2: begin
            i_next0 = 0;
            i_next0++;
            out_next0 = 1;
            dowhile_with_wait1_PROC_STATE_next = 1; return;    // test_do_while.cpp:71:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : dowhile_with_wait1_ff
    if ( ~arstn ) begin
        out <= 0;
        dowhile_with_wait1_PROC_STATE <= 0;    // test_do_while.cpp:63:9;
    end
    else begin
        out <= out_next0;
        i0 <= i_next0;
        dowhile_with_wait1_PROC_STATE <= dowhile_with_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: dowhile_with_wait2 (test_do_while.cpp:79:5) 

// Thread-local variables
logic signed [31:0] out_next1;
logic signed [31:0] i1;
logic signed [31:0] i_next1;
logic [1:0] dowhile_with_wait2_PROC_STATE;
logic [1:0] dowhile_with_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : dowhile_with_wait2_comb     // test_do_while.cpp:79:5
    dowhile_with_wait2_func;
end
function void dowhile_with_wait2_func;
    i_next1 = i1;
    out_next1 = out;
    dowhile_with_wait2_PROC_STATE_next = dowhile_with_wait2_PROC_STATE;
    
    case (dowhile_with_wait2_PROC_STATE)
        0: begin
            i_next1 = 0;
            i_next1++;
            out_next1 = 1;
            dowhile_with_wait2_PROC_STATE_next = 1; return;    // test_do_while.cpp:90:17;
        end
        1: begin
            if (in > 1)
            begin
                out_next1 = 2;
                dowhile_with_wait2_PROC_STATE_next = 2; return;    // test_do_while.cpp:94:21;
            end
            if (i_next1 < 3)
            begin
                i_next1++;
                out_next1 = 1;
                dowhile_with_wait2_PROC_STATE_next = 1; return;    // test_do_while.cpp:90:17;
            end
            out_next1 = 3;
            dowhile_with_wait2_PROC_STATE_next = 3; return;    // test_do_while.cpp:98:13;
        end
        2: begin
            if (i_next1 < 3)
            begin
                i_next1++;
                out_next1 = 1;
                dowhile_with_wait2_PROC_STATE_next = 1; return;    // test_do_while.cpp:90:17;
            end
            out_next1 = 3;
            dowhile_with_wait2_PROC_STATE_next = 3; return;    // test_do_while.cpp:98:13;
        end
        3: begin
            i_next1 = 0;
            i_next1++;
            out_next1 = 1;
            dowhile_with_wait2_PROC_STATE_next = 1; return;    // test_do_while.cpp:90:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : dowhile_with_wait2_ff
    if ( ~arstn ) begin
        out <= 0;
        dowhile_with_wait2_PROC_STATE <= 0;    // test_do_while.cpp:82:9;
    end
    else begin
        out <= out_next1;
        i1 <= i_next1;
        dowhile_with_wait2_PROC_STATE <= dowhile_with_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: dowhile_with_for (test_do_while.cpp:103:5) 

// Thread-local variables
logic signed [31:0] out_next2;
logic signed [31:0] j;
logic signed [31:0] j_next;
logic signed [31:0] i2;
logic signed [31:0] i_next2;
logic [1:0] dowhile_with_for_PROC_STATE;
logic [1:0] dowhile_with_for_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : dowhile_with_for_comb     // test_do_while.cpp:103:5
    dowhile_with_for_func;
end
function void dowhile_with_for_func;
    i_next2 = i2;
    j_next = j;
    out_next2 = out;
    dowhile_with_for_PROC_STATE_next = dowhile_with_for_PROC_STATE;
    
    case (dowhile_with_for_PROC_STATE)
        0: begin
            i_next2 = 0;
            i_next2++;
            out_next2 = 1;
            j_next = 0;
            if (in > 1)
            begin
                out_next2 = j_next;
            end
            dowhile_with_for_PROC_STATE_next = 1; return;    // test_do_while.cpp:119:21;
        end
        1: begin
            j_next++;
            if (j_next < 2)
            begin
                if (in > 1)
                begin
                    out_next2 = j_next;
                end
                dowhile_with_for_PROC_STATE_next = 1; return;    // test_do_while.cpp:119:21;
            end
            if (i_next2 < 3)
            begin
                i_next2++;
                out_next2 = 1;
                j_next = 0;
                if (in > 1)
                begin
                    out_next2 = j_next;
                end
                dowhile_with_for_PROC_STATE_next = 1; return;    // test_do_while.cpp:119:21;
            end
            out_next2 = 3;
            dowhile_with_for_PROC_STATE_next = 2; return;    // test_do_while.cpp:123:13;
        end
        2: begin
            i_next2 = 0;
            i_next2++;
            out_next2 = 1;
            j_next = 0;
            if (in > 1)
            begin
                out_next2 = j_next;
            end
            dowhile_with_for_PROC_STATE_next = 1; return;    // test_do_while.cpp:119:21;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : dowhile_with_for_ff
    if ( ~arstn ) begin
        out <= 0;
        dowhile_with_for_PROC_STATE <= 0;    // test_do_while.cpp:106:9;
    end
    else begin
        out <= out_next2;
        j <= j_next;
        i2 <= i_next2;
        dowhile_with_for_PROC_STATE <= dowhile_with_for_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: dowhile_with_signal_cond (test_do_while.cpp:128:5) 

// Thread-local variables
logic signed [31:0] out_next3;
logic [1:0] dowhile_with_signal_cond_PROC_STATE;
logic [1:0] dowhile_with_signal_cond_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : dowhile_with_signal_cond_comb     // test_do_while.cpp:128:5
    dowhile_with_signal_cond_func;
end
function void dowhile_with_signal_cond_func;
    out_next3 = out;
    dowhile_with_signal_cond_PROC_STATE_next = dowhile_with_signal_cond_PROC_STATE;
    
    case (dowhile_with_signal_cond_PROC_STATE)
        0: begin
            out_next3 = 1;
            dowhile_with_signal_cond_PROC_STATE_next = 1; return;    // test_do_while.cpp:137:17;
        end
        1: begin
            if (|in)
            begin
                out_next3 = 1;
                dowhile_with_signal_cond_PROC_STATE_next = 1; return;    // test_do_while.cpp:137:17;
            end
            out_next3 = 2;
            dowhile_with_signal_cond_PROC_STATE_next = 2; return;    // test_do_while.cpp:141:13;
        end
        2: begin
            out_next3 = 1;
            dowhile_with_signal_cond_PROC_STATE_next = 1; return;    // test_do_while.cpp:137:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : dowhile_with_signal_cond_ff
    if ( ~arstn ) begin
        out <= 0;
        dowhile_with_signal_cond_PROC_STATE <= 0;    // test_do_while.cpp:131:9;
    end
    else begin
        out <= out_next3;
        dowhile_with_signal_cond_PROC_STATE <= dowhile_with_signal_cond_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: complex1 (test_do_while.cpp:145:5) 

// Thread-local variables
logic signed [31:0] out_next4;
logic signed [31:0] i3;
logic signed [31:0] i_next3;
logic [1:0] complex1_PROC_STATE;
logic [1:0] complex1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : complex1_comb     // test_do_while.cpp:145:5
    complex1_func;
end
function void complex1_func;
    i_next3 = i3;
    out_next4 = out;
    complex1_PROC_STATE_next = complex1_PROC_STATE;
    
    case (complex1_PROC_STATE)
        0: begin
            i_next3 = 0;
            do
            begin
                i_next3++;
                i_next3++;
            end
            while (0);
            do
            begin
                i_next3++;
                out_next4 = i_next3;
            end
            while (i_next3 < 5);
            i_next3 = 0;
            i_next3++;
            out_next4 = i_next3;
            if (|in)
            begin
                // break begin
                complex1_PROC_STATE_next = 2; return;    // test_do_while.cpp:181:17;
                // break end
            end else begin
                complex1_PROC_STATE_next = 1; return;    // test_do_while.cpp:176:17;
            end
        end
        1: begin
            if (i_next3 < 3)
            begin
                i_next3++;
                out_next4 = i_next3;
                if (|in)
                begin
                    // break begin
                    complex1_PROC_STATE_next = 2; return;    // test_do_while.cpp:181:17;
                    // break end
                end else begin
                    complex1_PROC_STATE_next = 1; return;    // test_do_while.cpp:176:17;
                end
            end
            complex1_PROC_STATE_next = 2; return;    // test_do_while.cpp:181:17;
        end
        2: begin
            if (|in)
            begin
                complex1_PROC_STATE_next = 2; return;    // test_do_while.cpp:181:17;
            end
            i_next3 = 0;
            do
            begin
                i_next3++;
                i_next3++;
            end
            while (0);
            do
            begin
                i_next3++;
                out_next4 = i_next3;
            end
            while (i_next3 < 5);
            i_next3 = 0;
            i_next3++;
            out_next4 = i_next3;
            if (|in)
            begin
                // break begin
                complex1_PROC_STATE_next = 2; return;    // test_do_while.cpp:181:17;
                // break end
            end else begin
                complex1_PROC_STATE_next = 1; return;    // test_do_while.cpp:176:17;
            end
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : complex1_ff
    if ( ~arstn ) begin
        out <= 0;
        complex1_PROC_STATE <= 0;    // test_do_while.cpp:148:9;
    end
    else begin
        out <= out_next4;
        i3 <= i_next3;
        complex1_PROC_STATE <= complex1_PROC_STATE_next;
    end
end

endmodule


