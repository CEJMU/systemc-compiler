//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;
logic signed [31:0] in;
logic signed [31:0] out;

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_wait0 (test_while.cpp:71:5) 

// Thread-local variables
logic signed [31:0] i;
logic signed [31:0] i_next;
logic while_with_wait0_PROC_STATE;
logic while_with_wait0_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_wait0_comb     // test_while.cpp:71:5
    while_with_wait0_func;
end
function void while_with_wait0_func;
    i_next = i;
    while_with_wait0_PROC_STATE_next = while_with_wait0_PROC_STATE;
    
    case (while_with_wait0_PROC_STATE)
        0: begin
            i_next = 0;
            while_with_wait0_PROC_STATE_next = 1; return;    // test_while.cpp:79:17;
        end
        1: begin
            i_next++;
            if (i_next < 3)
            begin
                while_with_wait0_PROC_STATE_next = 1; return;    // test_while.cpp:79:17;
            end
            i_next = 0;
            while_with_wait0_PROC_STATE_next = 1; return;    // test_while.cpp:79:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_wait0_ff
    if ( ~arstn ) begin
        while_with_wait0_PROC_STATE <= 0;    // test_while.cpp:73:9;
    end
    else begin
        i <= i_next;
        while_with_wait0_PROC_STATE <= while_with_wait0_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_wait0a (test_while.cpp:86:5) 

// Thread-local variables
logic signed [31:0] i0;
logic signed [31:0] i_next0;
logic [1:0] while_with_wait0a_PROC_STATE;
logic [1:0] while_with_wait0a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_wait0a_comb     // test_while.cpp:86:5
    while_with_wait0a_func;
end
function void while_with_wait0a_func;
    i_next0 = i0;
    while_with_wait0a_PROC_STATE_next = while_with_wait0a_PROC_STATE;
    
    case (while_with_wait0a_PROC_STATE)
        0: begin
            if (i_next0 < 3)
            begin
                while_with_wait0a_PROC_STATE_next = 1; return;    // test_while.cpp:93:17;
            end
            while_with_wait0a_PROC_STATE_next = 2; return;    // test_while.cpp:96:13;
        end
        1: begin
            i_next0++;
            if (i_next0 < 3)
            begin
                while_with_wait0a_PROC_STATE_next = 1; return;    // test_while.cpp:93:17;
            end
            while_with_wait0a_PROC_STATE_next = 2; return;    // test_while.cpp:96:13;
        end
        2: begin
            if (i_next0 < 3)
            begin
                while_with_wait0a_PROC_STATE_next = 1; return;    // test_while.cpp:93:17;
            end
            while_with_wait0a_PROC_STATE_next = 2; return;    // test_while.cpp:96:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_wait0a_ff
    if ( ~arstn ) begin
        i0 <= 0;
        while_with_wait0a_PROC_STATE <= 0;    // test_while.cpp:89:9;
    end
    else begin
        i0 <= i_next0;
        while_with_wait0a_PROC_STATE <= while_with_wait0a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_wait1 (test_while.cpp:101:5) 

// Thread-local variables
logic signed [31:0] out_next;
logic signed [31:0] i1;
logic signed [31:0] i_next1;
logic [1:0] while_with_wait1_PROC_STATE;
logic [1:0] while_with_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_wait1_comb     // test_while.cpp:101:5
    while_with_wait1_func;
end
function void while_with_wait1_func;
    i_next1 = i1;
    out_next = out;
    while_with_wait1_PROC_STATE_next = while_with_wait1_PROC_STATE;
    
    case (while_with_wait1_PROC_STATE)
        0: begin
            i_next1 = 0;
            i_next1++;
            out_next = 1;
            while_with_wait1_PROC_STATE_next = 1; return;    // test_while.cpp:112:17;
        end
        1: begin
            if (i_next1 < 3)
            begin
                i_next1++;
                out_next = 1;
                while_with_wait1_PROC_STATE_next = 1; return;    // test_while.cpp:112:17;
            end
            out_next = 2;
            while_with_wait1_PROC_STATE_next = 2; return;    // test_while.cpp:115:13;
        end
        2: begin
            i_next1 = 0;
            i_next1++;
            out_next = 1;
            while_with_wait1_PROC_STATE_next = 1; return;    // test_while.cpp:112:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_wait1_ff
    if ( ~arstn ) begin
        out <= 0;
        while_with_wait1_PROC_STATE <= 0;    // test_while.cpp:104:9;
    end
    else begin
        out <= out_next;
        i1 <= i_next1;
        while_with_wait1_PROC_STATE <= while_with_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_wait2 (test_while.cpp:120:5) 

// Thread-local variables
logic signed [31:0] out_next0;
logic signed [31:0] i2;
logic signed [31:0] i_next2;
logic [1:0] while_with_wait2_PROC_STATE;
logic [1:0] while_with_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_wait2_comb     // test_while.cpp:120:5
    while_with_wait2_func;
end
function void while_with_wait2_func;
    i_next2 = i2;
    out_next0 = out;
    while_with_wait2_PROC_STATE_next = while_with_wait2_PROC_STATE;
    
    case (while_with_wait2_PROC_STATE)
        0: begin
            i_next2 = 0;
            i_next2++;
            out_next0 = 1;
            while_with_wait2_PROC_STATE_next = 1; return;    // test_while.cpp:131:17;
        end
        1: begin
            if (in > 1)
            begin
                out_next0 = 2;
                while_with_wait2_PROC_STATE_next = 2; return;    // test_while.cpp:135:21;
            end
            if (i_next2 < 3)
            begin
                i_next2++;
                out_next0 = 1;
                while_with_wait2_PROC_STATE_next = 1; return;    // test_while.cpp:131:17;
            end
            out_next0 = 3;
            while_with_wait2_PROC_STATE_next = 3; return;    // test_while.cpp:139:13;
        end
        2: begin
            if (i_next2 < 3)
            begin
                i_next2++;
                out_next0 = 1;
                while_with_wait2_PROC_STATE_next = 1; return;    // test_while.cpp:131:17;
            end
            out_next0 = 3;
            while_with_wait2_PROC_STATE_next = 3; return;    // test_while.cpp:139:13;
        end
        3: begin
            i_next2 = 0;
            i_next2++;
            out_next0 = 1;
            while_with_wait2_PROC_STATE_next = 1; return;    // test_while.cpp:131:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_wait2_ff
    if ( ~arstn ) begin
        out <= 0;
        while_with_wait2_PROC_STATE <= 0;    // test_while.cpp:123:9;
    end
    else begin
        out <= out_next0;
        i2 <= i_next2;
        while_with_wait2_PROC_STATE <= while_with_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_for (test_while.cpp:144:5) 

// Thread-local variables
logic signed [31:0] out_next1;
logic signed [31:0] j;
logic signed [31:0] j_next;
logic signed [31:0] i3;
logic signed [31:0] i_next3;
logic [1:0] while_with_for_PROC_STATE;
logic [1:0] while_with_for_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_for_comb     // test_while.cpp:144:5
    while_with_for_func;
end
function void while_with_for_func;
    i_next3 = i3;
    j_next = j;
    out_next1 = out;
    while_with_for_PROC_STATE_next = while_with_for_PROC_STATE;
    
    case (while_with_for_PROC_STATE)
        0: begin
            i_next3 = 0;
            i_next3++;
            out_next1 = 1;
            j_next = 0;
            if (in > 1)
            begin
                out_next1 = j_next;
            end
            while_with_for_PROC_STATE_next = 1; return;    // test_while.cpp:160:21;
        end
        1: begin
            j_next++;
            if (j_next < 2)
            begin
                if (in > 1)
                begin
                    out_next1 = j_next;
                end
                while_with_for_PROC_STATE_next = 1; return;    // test_while.cpp:160:21;
            end
            if (i_next3 < 3)
            begin
                i_next3++;
                out_next1 = 1;
                j_next = 0;
                if (in > 1)
                begin
                    out_next1 = j_next;
                end
                while_with_for_PROC_STATE_next = 1; return;    // test_while.cpp:160:21;
            end
            out_next1 = 3;
            while_with_for_PROC_STATE_next = 2; return;    // test_while.cpp:164:13;
        end
        2: begin
            i_next3 = 0;
            i_next3++;
            out_next1 = 1;
            j_next = 0;
            if (in > 1)
            begin
                out_next1 = j_next;
            end
            while_with_for_PROC_STATE_next = 1; return;    // test_while.cpp:160:21;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_for_ff
    if ( ~arstn ) begin
        out <= 0;
        while_with_for_PROC_STATE <= 0;    // test_while.cpp:147:9;
    end
    else begin
        out <= out_next1;
        j <= j_next;
        i3 <= i_next3;
        while_with_for_PROC_STATE <= while_with_for_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_signal_cond (test_while.cpp:169:5) 

// Thread-local variables
logic signed [31:0] out_next2;
logic [1:0] while_with_signal_cond_PROC_STATE;
logic [1:0] while_with_signal_cond_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_signal_cond_comb     // test_while.cpp:169:5
    while_with_signal_cond_func;
end
function void while_with_signal_cond_func;
    out_next2 = out;
    while_with_signal_cond_PROC_STATE_next = while_with_signal_cond_PROC_STATE;
    
    case (while_with_signal_cond_PROC_STATE)
        0: begin
            if (|in)
            begin
                out_next2 = 1;
                while_with_signal_cond_PROC_STATE_next = 1; return;    // test_while.cpp:178:17;
            end
            out_next2 = 2;
            while_with_signal_cond_PROC_STATE_next = 2; return;    // test_while.cpp:182:13;
        end
        1: begin
            if (|in)
            begin
                out_next2 = 1;
                while_with_signal_cond_PROC_STATE_next = 1; return;    // test_while.cpp:178:17;
            end
            out_next2 = 2;
            while_with_signal_cond_PROC_STATE_next = 2; return;    // test_while.cpp:182:13;
        end
        2: begin
            if (|in)
            begin
                out_next2 = 1;
                while_with_signal_cond_PROC_STATE_next = 1; return;    // test_while.cpp:178:17;
            end
            out_next2 = 2;
            while_with_signal_cond_PROC_STATE_next = 2; return;    // test_while.cpp:182:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_signal_cond_ff
    if ( ~arstn ) begin
        out <= 0;
        while_with_signal_cond_PROC_STATE <= 0;    // test_while.cpp:172:9;
    end
    else begin
        out <= out_next2;
        while_with_signal_cond_PROC_STATE <= while_with_signal_cond_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_binary_oper (test_while.cpp:187:5) 

// Thread-local variables
logic b1;
logic b1_next;
logic b2;
logic b2_next;
logic [1:0] while_with_binary_oper_PROC_STATE;
logic [1:0] while_with_binary_oper_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_binary_oper_comb     // test_while.cpp:187:5
    while_with_binary_oper_func;
end
function void while_with_binary_oper_func;
    integer k;
    b1_next = b1;
    b2_next = b2;
    while_with_binary_oper_PROC_STATE_next = while_with_binary_oper_PROC_STATE;
    
    case (while_with_binary_oper_PROC_STATE)
        0: begin
            if (b1_next || b2_next)
            begin
                k = 1;
                while_with_binary_oper_PROC_STATE_next = 1; return;    // test_while.cpp:196:17;
            end
            while_with_binary_oper_PROC_STATE_next = 2; return;    // test_while.cpp:199:13;
        end
        1: begin
            k = 2;
            if (b1_next || b2_next)
            begin
                k = 1;
                while_with_binary_oper_PROC_STATE_next = 1; return;    // test_while.cpp:196:17;
            end
            while_with_binary_oper_PROC_STATE_next = 2; return;    // test_while.cpp:199:13;
        end
        2: begin
            if (b1_next || b2_next)
            begin
                k = 1;
                while_with_binary_oper_PROC_STATE_next = 1; return;    // test_while.cpp:196:17;
            end
            while_with_binary_oper_PROC_STATE_next = 2; return;    // test_while.cpp:199:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_binary_oper_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        while_with_binary_oper_PROC_STATE <= 0;    // test_while.cpp:191:9;
    end
    else begin
        b1 <= b1_next;
        b2 <= b2_next;
        while_with_binary_oper_PROC_STATE <= while_with_binary_oper_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_binary_oper1 (test_while.cpp:203:5) 

// Thread-local variables
logic b10;
logic b1_next0;
logic b20;
logic b2_next0;
logic [1:0] while_with_binary_oper1_PROC_STATE;
logic [1:0] while_with_binary_oper1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_binary_oper1_comb     // test_while.cpp:203:5
    while_with_binary_oper1_func;
end
function void while_with_binary_oper1_func;
    integer k;
    b1_next0 = b10;
    b2_next0 = b20;
    while_with_binary_oper1_PROC_STATE_next = while_with_binary_oper1_PROC_STATE;
    
    case (while_with_binary_oper1_PROC_STATE)
        0: begin
            if (b1_next0 && b2_next0)
            begin
                k = 1;
                while_with_binary_oper1_PROC_STATE_next = 1; return;    // test_while.cpp:212:17;
            end
            while_with_binary_oper1_PROC_STATE_next = 2; return;    // test_while.cpp:215:13;
        end
        1: begin
            k = 2;
            if (b1_next0 && b2_next0)
            begin
                k = 1;
                while_with_binary_oper1_PROC_STATE_next = 1; return;    // test_while.cpp:212:17;
            end
            while_with_binary_oper1_PROC_STATE_next = 2; return;    // test_while.cpp:215:13;
        end
        2: begin
            if (b1_next0 && b2_next0)
            begin
                k = 1;
                while_with_binary_oper1_PROC_STATE_next = 1; return;    // test_while.cpp:212:17;
            end
            while_with_binary_oper1_PROC_STATE_next = 2; return;    // test_while.cpp:215:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_binary_oper1_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        while_with_binary_oper1_PROC_STATE <= 0;    // test_while.cpp:207:9;
    end
    else begin
        b10 <= b1_next0;
        b20 <= b2_next0;
        while_with_binary_oper1_PROC_STATE <= while_with_binary_oper1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_binary_oper2 (test_while.cpp:220:5) 

// Thread-local variables
logic b11;
logic b1_next1;
logic b21;
logic b2_next1;
logic b3;
logic b3_next;
logic [1:0] while_with_binary_oper2_PROC_STATE;
logic [1:0] while_with_binary_oper2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_binary_oper2_comb     // test_while.cpp:220:5
    while_with_binary_oper2_func;
end
function void while_with_binary_oper2_func;
    integer k;
    b1_next1 = b11;
    b2_next1 = b21;
    b3_next = b3;
    while_with_binary_oper2_PROC_STATE_next = while_with_binary_oper2_PROC_STATE;
    
    case (while_with_binary_oper2_PROC_STATE)
        0: begin
            if ((b1_next1 || b2_next1) && b3_next)
            begin
                k = 1;
                while_with_binary_oper2_PROC_STATE_next = 1; return;    // test_while.cpp:229:17;
            end
            while_with_binary_oper2_PROC_STATE_next = 2; return;    // test_while.cpp:232:13;
        end
        1: begin
            k = 2;
            if ((b1_next1 || b2_next1) && b3_next)
            begin
                k = 1;
                while_with_binary_oper2_PROC_STATE_next = 1; return;    // test_while.cpp:229:17;
            end
            while_with_binary_oper2_PROC_STATE_next = 2; return;    // test_while.cpp:232:13;
        end
        2: begin
            if ((b1_next1 || b2_next1) && b3_next)
            begin
                k = 1;
                while_with_binary_oper2_PROC_STATE_next = 1; return;    // test_while.cpp:229:17;
            end
            while_with_binary_oper2_PROC_STATE_next = 2; return;    // test_while.cpp:232:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_binary_oper2_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        while_with_binary_oper2_PROC_STATE <= 0;    // test_while.cpp:224:9;
    end
    else begin
        b11 <= b1_next1;
        b21 <= b2_next1;
        b3 <= b3_next;
        while_with_binary_oper2_PROC_STATE <= while_with_binary_oper2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: while_with_binary_oper3 (test_while.cpp:236:5) 

// Thread-local variables
logic b12;
logic b1_next2;
logic b22;
logic b2_next2;
logic b30;
logic b3_next0;
logic [1:0] while_with_binary_oper3_PROC_STATE;
logic [1:0] while_with_binary_oper3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : while_with_binary_oper3_comb     // test_while.cpp:236:5
    while_with_binary_oper3_func;
end
function void while_with_binary_oper3_func;
    integer k;
    b1_next2 = b12;
    b2_next2 = b22;
    b3_next0 = b30;
    while_with_binary_oper3_PROC_STATE_next = while_with_binary_oper3_PROC_STATE;
    
    case (while_with_binary_oper3_PROC_STATE)
        0: begin
            if ((b1_next2 && b2_next2) || b3_next0)
            begin
                k = 1;
                while_with_binary_oper3_PROC_STATE_next = 1; return;    // test_while.cpp:245:17;
            end
            while_with_binary_oper3_PROC_STATE_next = 2; return;    // test_while.cpp:248:13;
        end
        1: begin
            k = 2;
            if ((b1_next2 && b2_next2) || b3_next0)
            begin
                k = 1;
                while_with_binary_oper3_PROC_STATE_next = 1; return;    // test_while.cpp:245:17;
            end
            while_with_binary_oper3_PROC_STATE_next = 2; return;    // test_while.cpp:248:13;
        end
        2: begin
            if ((b1_next2 && b2_next2) || b3_next0)
            begin
                k = 1;
                while_with_binary_oper3_PROC_STATE_next = 1; return;    // test_while.cpp:245:17;
            end
            while_with_binary_oper3_PROC_STATE_next = 2; return;    // test_while.cpp:248:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : while_with_binary_oper3_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        while_with_binary_oper3_PROC_STATE <= 0;    // test_while.cpp:240:9;
    end
    else begin
        b12 <= b1_next2;
        b22 <= b2_next2;
        b30 <= b3_next0;
        while_with_binary_oper3_PROC_STATE <= while_with_binary_oper3_PROC_STATE_next;
    end
end

endmodule


