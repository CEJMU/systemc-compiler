// Generated by ScTool (c) Intel Corporation 
// 

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;
logic signed [31:0] in;

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait0 (test_cthread_break_continue.cpp:65:5) 

// Thread-local variables
logic signed [31:0] i;
logic signed [31:0] i_next;
logic [1:0] break_in_for_wait0_PROC_STATE;
logic [1:0] break_in_for_wait0_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait0_comb     // test_cthread_break_continue.cpp:65:5
    break_in_for_wait0_func;
end
function automatic void break_in_for_wait0_func;
    integer k;
    i_next = i;
    break_in_for_wait0_PROC_STATE_next = break_in_for_wait0_PROC_STATE;
    
    case (break_in_for_wait0_PROC_STATE)
        0: begin
            i_next = 0;
            if (in > 1)
            begin
                // break begin
                k = 1;
                break_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:80:13;
                // break end
            end
            k = 2;
            break_in_for_wait0_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:77:17;
        end
        1: begin
            i_next++;
            if (i_next < 3)
            begin
                if (in > 1)
                begin
                    // break begin
                    k = 1;
                    break_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:80:13;
                    // break end
                end
                k = 2;
                break_in_for_wait0_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:77:17;
            end
            k = 1;
            break_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:80:13;
        end
        2: begin
            i_next = 0;
            if (in > 1)
            begin
                // break begin
                k = 1;
                break_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:80:13;
                // break end
            end
            k = 2;
            break_in_for_wait0_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:77:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : break_in_for_wait0_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        break_in_for_wait0_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:68:9;
    end
    else begin
        i <= i_next;
        break_in_for_wait0_PROC_STATE <= break_in_for_wait0_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait1 (test_cthread_break_continue.cpp:85:5) 

// Thread-local variables
logic signed [31:0] i0;
logic signed [31:0] i_next0;
logic [1:0] break_in_for_wait1_PROC_STATE;
logic [1:0] break_in_for_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait1_comb     // test_cthread_break_continue.cpp:85:5
    break_in_for_wait1_func;
end
function automatic void break_in_for_wait1_func;
    integer k;
    i_next0 = i0;
    break_in_for_wait1_PROC_STATE_next = break_in_for_wait1_PROC_STATE;
    
    case (break_in_for_wait1_PROC_STATE)
        0: begin
            i_next0 = 0;
            k = 2;
            break_in_for_wait1_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:94:17;
        end
        1: begin
            if (in > 1)
            begin
                // break begin
                k = 1;
                break_in_for_wait1_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:100:13;
                // break end
            end
            i_next0++;
            if (i_next0 < 3)
            begin
                k = 2;
                break_in_for_wait1_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:94:17;
            end
            k = 1;
            break_in_for_wait1_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:100:13;
        end
        2: begin
            i_next0 = 0;
            k = 2;
            break_in_for_wait1_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:94:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : break_in_for_wait1_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        break_in_for_wait1_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:88:9;
    end
    else begin
        i0 <= i_next0;
        break_in_for_wait1_PROC_STATE <= break_in_for_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait2 (test_cthread_break_continue.cpp:106:5) 

// Thread-local variables
logic signed [31:0] i1;
logic signed [31:0] i_next1;
logic [1:0] break_in_for_wait2_PROC_STATE;
logic [1:0] break_in_for_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait2_comb     // test_cthread_break_continue.cpp:106:5
    break_in_for_wait2_func;
end
function automatic void break_in_for_wait2_func;
    integer k;
    i_next1 = i1;
    break_in_for_wait2_PROC_STATE_next = break_in_for_wait2_PROC_STATE;
    
    case (break_in_for_wait2_PROC_STATE)
        0: begin
            i_next1 = 0;
            if (in > 1)
            begin
                k = 1;
                break_in_for_wait2_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:116:21;
            end
            k = 3;
            break_in_for_wait2_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:121:17;
        end
        1: begin
            // break begin
            k = 2;
            break_in_for_wait2_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:124:13;
            // break end
        end
        2: begin
            i_next1++;
            if (i_next1 < 3)
            begin
                if (in > 1)
                begin
                    k = 1;
                    break_in_for_wait2_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:116:21;
                end
                k = 3;
                break_in_for_wait2_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:121:17;
            end
            k = 2;
            break_in_for_wait2_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:124:13;
        end
        3: begin
            i_next1 = 0;
            if (in > 1)
            begin
                k = 1;
                break_in_for_wait2_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:116:21;
            end
            k = 3;
            break_in_for_wait2_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:121:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : break_in_for_wait2_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        break_in_for_wait2_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:109:9;
    end
    else begin
        i1 <= i_next1;
        break_in_for_wait2_PROC_STATE <= break_in_for_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait3 (test_cthread_break_continue.cpp:129:5) 

// Thread-local variables
logic signed [31:0] j;
logic signed [31:0] j_next;
logic signed [31:0] i2;
logic signed [31:0] i_next2;
logic [1:0] break_in_for_wait3_PROC_STATE;
logic [1:0] break_in_for_wait3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait3_comb     // test_cthread_break_continue.cpp:129:5
    break_in_for_wait3_func;
end
function automatic void break_in_for_wait3_func;
    integer k;
    i_next2 = i2;
    j_next = j;
    break_in_for_wait3_PROC_STATE_next = break_in_for_wait3_PROC_STATE;
    
    case (break_in_for_wait3_PROC_STATE)
        0: begin
            i_next2 = 0;
            if (in > 1)
            begin
                j_next = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:152:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:148:25;
            end
            k = 4;
            break_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:157:17;
        end
        1: begin
            j_next++;
            if (j_next < 3)
            begin
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:152:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:148:25;
            end
            k = 2;
            break_in_for_wait3_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:152:21;
        end
        2: begin
            // break begin
            i_next2 = 0;
            if (in > 1)
            begin
                j_next = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:152:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:148:25;
            end
            k = 4;
            break_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:157:17;
            // break end
        end
        3: begin
            i_next2++;
            if (i_next2 < 3)
            begin
                if (in > 1)
                begin
                    j_next = 0;
                    if (in > 2)
                    begin
                        k = 1;
                        // break begin
                        k = 2;
                        break_in_for_wait3_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:152:21;
                        // break end
                    end
                    k = 3;
                    break_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:148:25;
                end
                k = 4;
                break_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:157:17;
            end
            i_next2 = 0;
            if (in > 1)
            begin
                j_next = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:152:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:148:25;
            end
            k = 4;
            break_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:157:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : break_in_for_wait3_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        break_in_for_wait3_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:132:9;
    end
    else begin
        j <= j_next;
        i2 <= i_next2;
        break_in_for_wait3_PROC_STATE <= break_in_for_wait3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait4 (test_cthread_break_continue.cpp:163:5) 

// Thread-local variables
logic signed [31:0] j0;
logic signed [31:0] j_next0;
logic signed [31:0] i3;
logic signed [31:0] i_next3;
logic [1:0] break_in_for_wait4_PROC_STATE;
logic [1:0] break_in_for_wait4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait4_comb     // test_cthread_break_continue.cpp:163:5
    break_in_for_wait4_func;
end
function automatic void break_in_for_wait4_func;
    integer k;
    i_next3 = i3;
    j_next0 = j0;
    break_in_for_wait4_PROC_STATE_next = break_in_for_wait4_PROC_STATE;
    
    case (break_in_for_wait4_PROC_STATE)
        0: begin
            i_next3 = 0;
            if (in > 1)
            begin
                j_next0 = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 5;
                    // break begin
                    k = 4;
                    break_in_for_wait4_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:192:13;
                    // break end
                    // break end
                end
                k = 2;
                break_in_for_wait4_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:181:25;
            end
            k = 3;
            break_in_for_wait4_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:188:17;
        end
        1: begin
            j_next0++;
            if (j_next0 < 3)
            begin
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 5;
                    // break begin
                    k = 4;
                    break_in_for_wait4_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:192:13;
                    // break end
                    // break end
                end
                k = 2;
                break_in_for_wait4_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:181:25;
            end
            k = 5;
            // break begin
            k = 4;
            break_in_for_wait4_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:192:13;
            // break end
        end
        2: begin
            i_next3++;
            if (i_next3 < 3)
            begin
                if (in > 1)
                begin
                    j_next0 = 0;
                    if (in > 2)
                    begin
                        k = 1;
                        // break begin
                        k = 5;
                        // break begin
                        k = 4;
                        break_in_for_wait4_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:192:13;
                        // break end
                        // break end
                    end
                    k = 2;
                    break_in_for_wait4_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:181:25;
                end
                k = 3;
                break_in_for_wait4_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:188:17;
            end
            k = 4;
            break_in_for_wait4_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:192:13;
        end
        3: begin
            i_next3 = 0;
            if (in > 1)
            begin
                j_next0 = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 5;
                    // break begin
                    k = 4;
                    break_in_for_wait4_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:192:13;
                    // break end
                    // break end
                end
                k = 2;
                break_in_for_wait4_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:181:25;
            end
            k = 3;
            break_in_for_wait4_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:188:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : break_in_for_wait4_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        break_in_for_wait4_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:166:9;
    end
    else begin
        j0 <= j_next0;
        i3 <= i_next3;
        break_in_for_wait4_PROC_STATE <= break_in_for_wait4_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: continue_in_for_wait0 (test_cthread_break_continue.cpp:219:5) 

// Thread-local variables
logic signed [31:0] i4;
logic signed [31:0] i_next4;
logic [1:0] continue_in_for_wait0_PROC_STATE;
logic [1:0] continue_in_for_wait0_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : continue_in_for_wait0_comb     // test_cthread_break_continue.cpp:219:5
    continue_in_for_wait0_func;
end
function automatic void continue_in_for_wait0_func;
    integer k;
    i_next4 = i4;
    continue_in_for_wait0_PROC_STATE_next = continue_in_for_wait0_PROC_STATE;
    
    case (continue_in_for_wait0_PROC_STATE)
        0: begin
            i_next4 = 0;
            if (in > 1)
            begin
                k = 1;
                continue_in_for_wait0_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:229:21;
            end
            k = 2;
            continue_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:234:17;
        end
        1: begin
            // continue begin
            i_next4++;
            if (i_next4 < 3)
            begin
                if (in > 1)
                begin
                    k = 1;
                    continue_in_for_wait0_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:229:21;
                end
                k = 2;
                continue_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:234:17;
            end
            k = 3;
            continue_in_for_wait0_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:237:13;
            // continue end
        end
        2: begin
            i_next4++;
            if (i_next4 < 3)
            begin
                if (in > 1)
                begin
                    k = 1;
                    continue_in_for_wait0_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:229:21;
                end
                k = 2;
                continue_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:234:17;
            end
            k = 3;
            continue_in_for_wait0_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:237:13;
        end
        3: begin
            i_next4 = 0;
            if (in > 1)
            begin
                k = 1;
                continue_in_for_wait0_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:229:21;
            end
            k = 2;
            continue_in_for_wait0_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:234:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : continue_in_for_wait0_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        continue_in_for_wait0_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:222:9;
    end
    else begin
        i4 <= i_next4;
        continue_in_for_wait0_PROC_STATE <= continue_in_for_wait0_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: continue_in_for_wait1 (test_cthread_break_continue.cpp:242:5) 

// Thread-local variables
logic signed [31:0] i5;
logic signed [31:0] i_next5;
logic [1:0] continue_in_for_wait1_PROC_STATE;
logic [1:0] continue_in_for_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : continue_in_for_wait1_comb     // test_cthread_break_continue.cpp:242:5
    continue_in_for_wait1_func;
end
function automatic void continue_in_for_wait1_func;
    integer k;
    i_next5 = i5;
    continue_in_for_wait1_PROC_STATE_next = continue_in_for_wait1_PROC_STATE;
    
    case (continue_in_for_wait1_PROC_STATE)
        0: begin
            i_next5 = 0;
            k = 1;
            continue_in_for_wait1_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:251:17;
        end
        1: begin
            if (in > 1)
            begin
                k = 2;
                // continue begin
                i_next5++;
                if (i_next5 < 3)
                begin
                    k = 1;
                    continue_in_for_wait1_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:251:17;
                end
                continue_in_for_wait1_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:259:13;
                // continue end
            end
            k = 3;
            i_next5++;
            if (i_next5 < 3)
            begin
                k = 1;
                continue_in_for_wait1_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:251:17;
            end
            continue_in_for_wait1_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:259:13;
        end
        2: begin
            i_next5 = 0;
            k = 1;
            continue_in_for_wait1_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:251:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : continue_in_for_wait1_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        continue_in_for_wait1_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:245:9;
    end
    else begin
        i5 <= i_next5;
        continue_in_for_wait1_PROC_STATE <= continue_in_for_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: continue_in_for_wait2 (test_cthread_break_continue.cpp:264:5) 

// Thread-local variables
logic signed [31:0] i6;
logic signed [31:0] i_next6;
logic [1:0] continue_in_for_wait2_PROC_STATE;
logic [1:0] continue_in_for_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : continue_in_for_wait2_comb     // test_cthread_break_continue.cpp:264:5
    continue_in_for_wait2_func;
end
function automatic void continue_in_for_wait2_func;
    integer k;
    i_next6 = i6;
    continue_in_for_wait2_PROC_STATE_next = continue_in_for_wait2_PROC_STATE;
    
    case (continue_in_for_wait2_PROC_STATE)
        0: begin
            i_next6 = 0;
            k = 1;
            continue_in_for_wait2_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:273:17;
        end
        1: begin
            if (in > 1)
            begin
                k = 2;
                // continue begin
                i_next6++;
                if (i_next6 < 3)
                begin
                    k = 1;
                    continue_in_for_wait2_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:273:17;
                end
                k = 3;
                continue_in_for_wait2_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:282:13;
                // continue end
            end
            k = 4;
            i_next6++;
            if (i_next6 < 3)
            begin
                k = 1;
                continue_in_for_wait2_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:273:17;
            end
            k = 3;
            continue_in_for_wait2_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:282:13;
        end
        2: begin
            i_next6 = 0;
            k = 1;
            continue_in_for_wait2_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:273:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : continue_in_for_wait2_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        continue_in_for_wait2_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:267:9;
    end
    else begin
        i6 <= i_next6;
        continue_in_for_wait2_PROC_STATE <= continue_in_for_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: continue_in_for_wait3 (test_cthread_break_continue.cpp:287:5) 

// Thread-local variables
logic signed [31:0] j1;
logic signed [31:0] j_next1;
logic signed [31:0] i7;
logic signed [31:0] i_next7;
logic [1:0] continue_in_for_wait3_PROC_STATE;
logic [1:0] continue_in_for_wait3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : continue_in_for_wait3_comb     // test_cthread_break_continue.cpp:287:5
    continue_in_for_wait3_func;
end
function automatic void continue_in_for_wait3_func;
    integer k;
    i_next7 = i7;
    j_next1 = j1;
    continue_in_for_wait3_PROC_STATE_next = continue_in_for_wait3_PROC_STATE;
    
    case (continue_in_for_wait3_PROC_STATE)
        0: begin
            i_next7 = 0;
            j_next1 = 0;
            k = 1;
            continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
        end
        1: begin
            if (in > 1)
            begin
                k = 2;
                continue_in_for_wait3_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:301:25;
            end
            if (in > 2)
            begin
                k = 3;
                // continue begin
                j_next1++;
                if (j_next1 < 2)
                begin
                    k = 1;
                    continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
                end
                i_next7++;
                if (i_next7 < 3)
                begin
                    j_next1 = 0;
                    k = 1;
                    continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
                end
                k = 4;
                continue_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:311:13;
                // continue end
            end
            j_next1++;
            if (j_next1 < 2)
            begin
                k = 1;
                continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
            end
            i_next7++;
            if (i_next7 < 3)
            begin
                j_next1 = 0;
                k = 1;
                continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
            end
            k = 4;
            continue_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:311:13;
        end
        2: begin
            if (in > 2)
            begin
                k = 3;
                // continue begin
                j_next1++;
                if (j_next1 < 2)
                begin
                    k = 1;
                    continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
                end
                i_next7++;
                if (i_next7 < 3)
                begin
                    j_next1 = 0;
                    k = 1;
                    continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
                end
                k = 4;
                continue_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:311:13;
                // continue end
            end
            j_next1++;
            if (j_next1 < 2)
            begin
                k = 1;
                continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
            end
            i_next7++;
            if (i_next7 < 3)
            begin
                j_next1 = 0;
                k = 1;
                continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
            end
            k = 4;
            continue_in_for_wait3_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:311:13;
        end
        3: begin
            i_next7 = 0;
            j_next1 = 0;
            k = 1;
            continue_in_for_wait3_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:297:21;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : continue_in_for_wait3_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        continue_in_for_wait3_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:290:9;
    end
    else begin
        j1 <= j_next1;
        i7 <= i_next7;
        continue_in_for_wait3_PROC_STATE <= continue_in_for_wait3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: continue_in_while_wait (test_cthread_break_continue.cpp:315:5) 

// Thread-local variables
logic signed [31:0] i8;
logic signed [31:0] i_next8;
logic [1:0] continue_in_while_wait_PROC_STATE;
logic [1:0] continue_in_while_wait_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : continue_in_while_wait_comb     // test_cthread_break_continue.cpp:315:5
    continue_in_while_wait_func;
end
function automatic void continue_in_while_wait_func;
    integer k;
    i_next8 = i8;
    continue_in_while_wait_PROC_STATE_next = continue_in_while_wait_PROC_STATE;
    
    case (continue_in_while_wait_PROC_STATE)
        0: begin
            i_next8 = 0;
            if (in > 1)
            begin
                k = 1;
                continue_in_while_wait_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:326:21;
            end
            i_next8++;
            continue_in_while_wait_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:331:17;
        end
        1: begin
            // continue begin
            if (i_next8 < 3)
            begin
                if (in > 1)
                begin
                    k = 1;
                    continue_in_while_wait_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:326:21;
                end
                i_next8++;
                continue_in_while_wait_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:331:17;
            end
            k = 3;
            continue_in_while_wait_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:334:13;
            // continue end
        end
        2: begin
            if (i_next8 < 3)
            begin
                if (in > 1)
                begin
                    k = 1;
                    continue_in_while_wait_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:326:21;
                end
                i_next8++;
                continue_in_while_wait_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:331:17;
            end
            k = 3;
            continue_in_while_wait_PROC_STATE_next = 3; return;    // test_cthread_break_continue.cpp:334:13;
        end
        3: begin
            i_next8 = 0;
            if (in > 1)
            begin
                k = 1;
                continue_in_while_wait_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:326:21;
            end
            i_next8++;
            continue_in_while_wait_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:331:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : continue_in_while_wait_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        continue_in_while_wait_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:318:9;
    end
    else begin
        i8 <= i_next8;
        continue_in_while_wait_PROC_STATE <= continue_in_while_wait_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_while_wait (test_cthread_break_continue.cpp:197:5) 

// Thread-local variables
logic signed [31:0] i9;
logic signed [31:0] i_next9;
logic [1:0] break_in_while_wait_PROC_STATE;
logic [1:0] break_in_while_wait_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_while_wait_comb     // test_cthread_break_continue.cpp:197:5
    break_in_while_wait_func;
end
function automatic void break_in_while_wait_func;
    integer k;
    i_next9 = i9;
    break_in_while_wait_PROC_STATE_next = break_in_while_wait_PROC_STATE;
    
    case (break_in_while_wait_PROC_STATE)
        0: begin
            i_next9 = 0;
            k = 2;
            break_in_while_wait_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:207:17;
        end
        1: begin
            if (in > 1)
            begin
                // break begin
                k = 1;
                break_in_while_wait_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:214:13;
                // break end
            end
            i_next9++;
            if (i_next9 < 3)
            begin
                k = 2;
                break_in_while_wait_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:207:17;
            end
            k = 1;
            break_in_while_wait_PROC_STATE_next = 2; return;    // test_cthread_break_continue.cpp:214:13;
        end
        2: begin
            i_next9 = 0;
            k = 2;
            break_in_while_wait_PROC_STATE_next = 1; return;    // test_cthread_break_continue.cpp:207:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : break_in_while_wait_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        break_in_while_wait_PROC_STATE <= 0;    // test_cthread_break_continue.cpp:200:9;
    end
    else begin
        i9 <= i_next9;
        break_in_while_wait_PROC_STATE <= break_in_while_wait_PROC_STATE_next;
    end
end

endmodule


