//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: test ()
//
module test // "test_inst"
(
);

// SystemC signals
logic clk;
logic rstn;
logic idx;
logic signed [31:0] outs;

// C++ data variables
localparam logic signed [31:0] ARR0[2] = '{ 'd20, 'd21 };
localparam logic signed [31:0] ARR1[2] = '{ 'd30, 'd31 };
localparam logic signed [31:0] ARR2[2] = '{ 'd40, 'd41 };

//------------------------------------------------------------------------------
// Method process: test_method (test_cthread_const_array.cpp:30:5) 

always_comb 
begin : test_method     // test_cthread_const_array.cpp:30:5
    outs = ARR0[idx];
    outs = ARR1[idx];
    outs = ARR2[idx];
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_thread (test_cthread_const_array.cpp:39:5) 

// Thread-local variables
logic signed [31:0] outs_next;

// Next-state combinational logic
always_comb begin : test_thread_comb     // test_cthread_const_array.cpp:39:5
    test_thread_func;
end
function void test_thread_func;
    outs_next = outs;
    outs_next = ARR0[idx];
    outs_next = ARR1[idx];
    outs_next = ARR2[idx];
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge rstn) 
begin : test_thread_ff
    if ( ~rstn ) begin
    end
    else begin
        outs <= outs_next;
    end
end

endmodule


