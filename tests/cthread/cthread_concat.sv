//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;
logic signed [31:0] in;
logic signed [31:0] out;

//------------------------------------------------------------------------------
// Clocked THREAD: concat_lhs1 (test_cthread_concat.cpp:51:5) 

// Thread-local variables
logic signed [31:0] out_next;
logic [2:0] x;
logic [2:0] x_next;
logic [2:0] a;
logic [2:0] a_next;

// Next-state combinational logic
always_comb begin : concat_lhs1_comb     // test_cthread_concat.cpp:51:5
    concat_lhs1_func;
end
function void concat_lhs1_func;
    a_next = a;
    out_next = out;
    x_next = x;
    {x_next, a_next} = 42;
    out_next = x_next + a_next;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : concat_lhs1_ff
    if ( ~arstn ) begin
        out <= 0;
        x <= 0;
        a <= 3;
    end
    else begin
        out <= out_next;
        x <= x_next;
        a <= a_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: concat_lhs1a (test_cthread_concat.cpp:66:5) 

// Thread-local variables
logic signed [31:0] out_next0;
logic [2:0] x0;
logic [2:0] x_next0;
logic [1:0] y;
logic [1:0] y_next;

// Next-state combinational logic
always_comb begin : concat_lhs1a_comb     // test_cthread_concat.cpp:66:5
    concat_lhs1a_func;
end
function void concat_lhs1a_func;
    out_next0 = out;
    x_next0 = x0;
    y_next = y;
    {x_next0, y_next} = 42;
    x_next0 = y_next + 1;
    out_next0 = x_next0 + y_next;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : concat_lhs1a_ff
    if ( ~arstn ) begin
        out <= 0;
        x0 <= 0;
        y <= 0;
    end
    else begin
        out <= out_next0;
        x0 <= x_next0;
        y <= y_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: concat_lhs2 (test_cthread_concat.cpp:82:5) 

// Thread-local variables
logic signed [31:0] out_next1;
logic [3:0] b;
logic [3:0] b_next;
logic [2:0] x1;
logic [2:0] x_next1;

// Next-state combinational logic
always_comb begin : concat_lhs2_comb     // test_cthread_concat.cpp:82:5
    concat_lhs2_func;
end
function void concat_lhs2_func;
    b_next = b;
    out_next1 = out;
    x_next1 = x1;
    {b_next, x_next1} = 0;
    out_next1 = b_next;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : concat_lhs2_ff
    if ( ~arstn ) begin
        out <= 0;
        x1 <= 0;
    end
    else begin
        out <= out_next1;
        b <= b_next;
        x1 <= x_next1;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: concat_lhs3 (test_cthread_concat.cpp:96:5) 

// Thread-local variables
logic [2:0] x2;
logic [2:0] x_next2;
logic [4:0] c;

// Next-state combinational logic
always_comb begin : concat_lhs3_comb     // test_cthread_concat.cpp:96:5
    concat_lhs3_func;
end
function void concat_lhs3_func;
    x_next2 = x2;
    c = 3;
    {x_next2, c} = 1;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : concat_lhs3_ff
    if ( ~arstn ) begin
        logic [4:0] c;
        c = 0;
        x2 <= 0;
    end
    else begin
        x2 <= x_next2;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: concat_lhs4 (test_cthread_concat.cpp:110:5) 

// Thread-local variables
logic [5:0] d;
logic [5:0] d_next;

// Next-state combinational logic
always_comb begin : concat_lhs4_comb     // test_cthread_concat.cpp:110:5
    concat_lhs4_func;
end
function void concat_lhs4_func;
    logic [2:0] x;
    d_next = d;
    x = 1;
    {d_next, x} = in;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : concat_lhs4_ff
    if ( ~arstn ) begin
        logic [2:0] x;
        x = 0;
    end
    else begin
        d <= d_next;
    end
end

endmodule


