//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;
logic signed [31:0] enabled;
logic signed [31:0] reset;

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_no_wait (test_cthread_for.cpp:67:5) 

// Next-state combinational logic
always_comb begin : for_stmt_no_wait_comb     // test_cthread_for.cpp:67:5
    for_stmt_no_wait_func;
end
function void for_stmt_no_wait_func;
    integer k;
    for (integer i = 0; i < 2; i++)
    begin
        k = 1;
    end
    k = 2;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_no_wait_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait0 (test_cthread_for.cpp:83:5) 

// Thread-local variables
logic signed [31:0] i;
logic signed [31:0] i_next;
logic [1:0] for_stmt_wait0_PROC_STATE;
logic [1:0] for_stmt_wait0_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait0_comb     // test_cthread_for.cpp:83:5
    for_stmt_wait0_func;
end
function void for_stmt_wait0_func;
    integer k;
    i_next = i;
    for_stmt_wait0_PROC_STATE_next = for_stmt_wait0_PROC_STATE;
    
    case (for_stmt_wait0_PROC_STATE)
        0: begin
            k = 1;
            for_stmt_wait0_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:90:13;
        end
        1: begin
            i_next = 0;
            k = 2;
            for_stmt_wait0_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:94:17;
        end
        2: begin
            i_next++;
            if (i_next < 2)
            begin
                k = 2;
                for_stmt_wait0_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:94:17;
            end
            k = 3;
            k = 1;
            for_stmt_wait0_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:90:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait0_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        for_stmt_wait0_PROC_STATE <= 0;    // test_cthread_for.cpp:86:9;
    end
    else begin
        i <= i_next;
        for_stmt_wait0_PROC_STATE <= for_stmt_wait0_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait1 (test_cthread_for.cpp:100:5) 

// Thread-local variables
logic signed [31:0] i0;
logic signed [31:0] i_next0;
logic for_stmt_wait1_PROC_STATE;
logic for_stmt_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait1_comb     // test_cthread_for.cpp:100:5
    for_stmt_wait1_func;
end
function void for_stmt_wait1_func;
    integer k;
    i_next0 = i0;
    for_stmt_wait1_PROC_STATE_next = for_stmt_wait1_PROC_STATE;
    
    case (for_stmt_wait1_PROC_STATE)
        0: begin
            i_next0 = 0;
            k = 1;
            for_stmt_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:108:17;
        end
        1: begin
            i_next0++;
            if (i_next0 < 2)
            begin
                k = 1;
                for_stmt_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:108:17;
            end
            k = 2;
            i_next0 = 0;
            k = 1;
            for_stmt_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:108:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait1_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        for_stmt_wait1_PROC_STATE <= 0;    // test_cthread_for.cpp:103:9;
    end
    else begin
        i0 <= i_next0;
        for_stmt_wait1_PROC_STATE <= for_stmt_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait2 (test_cthread_for.cpp:114:5) 

// Thread-local variables
logic signed [31:0] i1;
logic signed [31:0] i_next1;
logic [1:0] for_stmt_wait2_PROC_STATE;
logic [1:0] for_stmt_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait2_comb     // test_cthread_for.cpp:114:5
    for_stmt_wait2_func;
end
function void for_stmt_wait2_func;
    integer k;
    i_next1 = i1;
    for_stmt_wait2_PROC_STATE_next = for_stmt_wait2_PROC_STATE;
    
    case (for_stmt_wait2_PROC_STATE)
        0: begin
            i_next1 = 0;
            k = 1;
            for_stmt_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:122:17;
        end
        1: begin
            i_next1++;
            if (i_next1 < 2)
            begin
                k = 1;
                for_stmt_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:122:17;
            end
            k = 2;
            for_stmt_wait2_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:125:13;
        end
        2: begin
            k = 3;
            i_next1 = 0;
            k = 1;
            for_stmt_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:122:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait2_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        for_stmt_wait2_PROC_STATE <= 0;    // test_cthread_for.cpp:117:9;
    end
    else begin
        i1 <= i_next1;
        for_stmt_wait2_PROC_STATE <= for_stmt_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait_noiter (test_cthread_for.cpp:132:5) 

// Next-state combinational logic
always_comb begin : for_stmt_wait_noiter_comb     // test_cthread_for.cpp:132:5
    for_stmt_wait_noiter_func;
end
function void for_stmt_wait_noiter_func;
    integer k;
    integer i;
    k = 1;
    i = 0;
    k = 3;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait_noiter_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_break (test_cthread_for.cpp:55:5) 

// Thread-local variables
logic [1:0] thread_break_PROC_STATE;
logic [1:0] thread_break_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_break_comb     // test_cthread_for.cpp:55:5
    thread_break_func;
end
function void thread_break_func;
    thread_break_PROC_STATE_next = thread_break_PROC_STATE;
    
    case (thread_break_PROC_STATE)
        0: begin
            thread_break_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:58:13;
        end
        1: begin
            if (!(|enabled))
            begin
                if (|reset)
                begin
                    // break begin
                    thread_break_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:58:13;
                    // break end
                end
                thread_break_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:61:17;
            end
            thread_break_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:58:13;
        end
        2: begin
            if (!(|enabled))
            begin
                if (|reset)
                begin
                    // break begin
                    thread_break_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:58:13;
                    // break end
                end
                thread_break_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:61:17;
            end
            thread_break_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:58:13;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : thread_break_ff
    if ( ~arstn ) begin
        thread_break_PROC_STATE <= 0;    // test_cthread_for.cpp:56:9;
    end
    else begin
        thread_break_PROC_STATE <= thread_break_PROC_STATE_next;
    end
end

endmodule


