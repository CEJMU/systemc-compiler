//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;
logic signed [31:0] out;
logic signed [31:0] in;

//------------------------------------------------------------------------------
// Clocked THREAD: dowhile_forever (test_do_while_always1.cpp:37:5) 

// Thread-local variables
logic signed [31:0] out_next;
logic signed [31:0] i;
logic signed [31:0] i_next;
logic dowhile_forever_PROC_STATE;
logic dowhile_forever_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : dowhile_forever_comb     // test_do_while_always1.cpp:37:5
    dowhile_forever_func;
end
function void dowhile_forever_func;
    i_next = i;
    out_next = out;
    dowhile_forever_PROC_STATE_next = dowhile_forever_PROC_STATE;
    
    case (dowhile_forever_PROC_STATE)
        0: begin
            i_next = 0;
            out_next = 1;
            dowhile_forever_PROC_STATE_next = 1; return;    // test_do_while_always1.cpp:47:17;
        end
        1: begin
            i_next++;
            if (i_next < 3)
            begin
                out_next = 1;
                dowhile_forever_PROC_STATE_next = 1; return;    // test_do_while_always1.cpp:47:17;
            end
            out_next = 2;
            i_next = 0;
            out_next = 1;
            dowhile_forever_PROC_STATE_next = 1; return;    // test_do_while_always1.cpp:47:17;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : dowhile_forever_ff
    if ( ~arstn ) begin
        out <= 0;
        dowhile_forever_PROC_STATE <= 0;    // test_do_while_always1.cpp:40:9;
    end
    else begin
        out <= out_next;
        i <= i_next;
        dowhile_forever_PROC_STATE <= dowhile_forever_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_ever (test_do_while_always1.cpp:57:5) 

// Thread-local variables
logic signed [31:0] out_next0;
logic signed [31:0] j;
logic signed [31:0] j_next;
logic signed [31:0] i0;
logic signed [31:0] i_next0;
logic [1:0] for_ever_PROC_STATE;
logic [1:0] for_ever_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_ever_comb     // test_do_while_always1.cpp:57:5
    for_ever_func;
end
function void for_ever_func;
    i_next0 = i0;
    j_next = j;
    out_next0 = out;
    for_ever_PROC_STATE_next = for_ever_PROC_STATE;
    
    case (for_ever_PROC_STATE)
        0: begin
            i_next0 = 0;
            i_next0++;
            out_next0 = 1;
            j_next = 0;
            if (in > 1)
            begin
                out_next0 = j_next;
            end
            for_ever_PROC_STATE_next = 1; return;    // test_do_while_always1.cpp:73:21;
        end
        1: begin
            j_next++;
            if (j_next < 2)
            begin
                if (in > 1)
                begin
                    out_next0 = j_next;
                end
                for_ever_PROC_STATE_next = 1; return;    // test_do_while_always1.cpp:73:21;
            end
            if (i_next0 < 3)
            begin
                i_next0++;
                out_next0 = 1;
                j_next = 0;
                if (in > 1)
                begin
                    out_next0 = j_next;
                end
                for_ever_PROC_STATE_next = 1; return;    // test_do_while_always1.cpp:73:21;
            end
            out_next0 = 3;
            for_ever_PROC_STATE_next = 2; return;    // test_do_while_always1.cpp:77:13;
        end
        2: begin
            i_next0 = 0;
            i_next0++;
            out_next0 = 1;
            j_next = 0;
            if (in > 1)
            begin
                out_next0 = j_next;
            end
            for_ever_PROC_STATE_next = 1; return;    // test_do_while_always1.cpp:73:21;
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_ever_ff
    if ( ~arstn ) begin
        out <= 0;
        for_ever_PROC_STATE <= 0;    // test_do_while_always1.cpp:60:9;
    end
    else begin
        out <= out_next0;
        j <= j_next;
        i0 <= i_next0;
        for_ever_PROC_STATE <= for_ever_PROC_STATE_next;
    end
end

endmodule


