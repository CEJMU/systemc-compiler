//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.5
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: comb_signal_module ()
//
module comb_signal_module // "tb.mod"
(
    input logic clk,
    input logic nrst
);

// Variables generated for SystemC signals
logic css;
logic csp;
logic csa[2];
logic cspa[2];
logic [2:0] s;
logic [2:0] cms;
logic [2:0] cmc;
logic [2:0] s_;
logic [2:0] cms_;
logic [2:0] cmc_;

// Local parameters generated for C++ constants
localparam logic [31:0] N = 2;

//------------------------------------------------------------------------------
// Clocked THREAD: thrdProc (test_comb_signal_clear.cpp:58:5) 

// Next-state combinational logic
always_comb begin : thrdProc_comb     // test_comb_signal_clear.cpp:58:5
    thrdProc_func;
end
function void thrdProc_func;
    csa = '{default:0};
    csp = '0;
    cspa = '{default:0};
    css = '0;
    css = 5;
    csa[0] = 7;
    csp = 6;
    for (integer i = 0; i < N; i++)
    begin
        csa[i] = 7;
        cspa[i] = 8;
    end
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge nrst) 
begin : thrdProc_ff
    if ( ~nrst ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: allCombThread (test_comb_signal_clear.cpp:110:5) 

// Thread-local variables
logic [2:0] s_next;
logic [2:0] cms_next;

// Next-state combinational logic
always_comb begin : allCombThread_comb     // test_comb_signal_clear.cpp:110:5
    allCombThread_func;
end
function void allCombThread_func;
    cmc = '0;
    cms = cms_next;
    s_next = s;
    s_next = 2;
    cms = 2;
    cmc = 2;
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge nrst) 
begin : allCombThread_ff
    if ( ~nrst ) begin
        s <= 1;
        cms_next <= 1;
    end
    else begin
        s <= s_next;
        cms_next <= cms;
    end
end

//------------------------------------------------------------------------------
// Method process: allCombMethod (test_comb_signal_clear.cpp:131:5) 

always_comb 
begin : allCombMethod     // test_comb_signal_clear.cpp:131:5
    s_ = 1;
    cms_ = 1;
    cmc_ = 1;
    if (css)
    begin
        s_ = 2;
        cms_ = 2;
        cmc_ = 2;
    end
end

endmodule


