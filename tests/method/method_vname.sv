//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);


//------------------------------------------------------------------------------

A a_mod
(

);

endmodule



//==============================================================================
//
// Module: A (test_vname.cpp:94:5)
//
module A // "b_mod.a_mod"
(
);

// SystemC signals

//------------------------------------------------------------------------------
// Method process: var1 (test_vname.cpp:44:5) 

// Process-local variables
logic signed [31:0] k;
logic m;
logic [1:0] m0;

always_comb 
begin : var1     // test_vname.cpp:44:5
    integer i_1;
    logic k_1;
    logic [2:0] m_1;
    for (integer i = 0; i < 5; i++)
    begin
        for (integer j = 0; j < 5; j++)
        begin
            k = j != i;
            k_1 = (j == i);
        end
    end
    k = i_1;
    m = 0;
    m0 = 1;
    m_1 = 2;
end

//------------------------------------------------------------------------------
// Method process: var2 (test_vname.cpp:60:5) 

// Process-local variables
logic m;
logic [1:0] m0;
logic signed [31:0] k;
logic signed [31:0] j;

always_comb 
begin : var2     // test_vname.cpp:60:5
    logic [2:0] m_1;
    m = 0;
    m0 = 1;
    m_1 = 2;
    k = m + m_1;
    j = m + m0;
end

//------------------------------------------------------------------------------
// Method process: var3 (test_vname.cpp:71:5) 

always_comb 
begin : var3     // test_vname.cpp:71:5
    logic [1:0] i_1;
    logic [2:0] i_2;
    logic [3:0] i_3;
    logic [1:0] l_1;
    logic [2:0] l_1_1;
    logic n_1;
    logic [1:0] n_2;
    logic [2:0] n_3;
    logic [3:0] n;
    logic [4:0] n_4;
    logic x_1;
    logic [1:0] x_2;
    i_1 = 1;
    i_2 = 2;
    i_3 = 3;
    l_1 = 0;
    l_1_1 = 0;
    n_1 = 0;
    n_2 = 0;
    n_3 = 0;
    n = 0;
    n_4 = 0;
    x_1 = 0;
    x_2 = 0;
end

endmodule


