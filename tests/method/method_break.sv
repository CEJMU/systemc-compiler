//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// SystemC signals
logic a;
logic b;
logic c;


//------------------------------------------------------------------------------

A a_mod
(
  .a(a),
  .b(b),
  .c(c)
);

endmodule



//==============================================================================
//
// Module: A (test_break.cpp:229:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b,
    output logic c
);

// SystemC signals
logic signed [31:0] si;

//------------------------------------------------------------------------------
// Method process: for_break1 (test_break.cpp:43:5) 

always_comb 
begin : for_break1     // test_break.cpp:43:5
    integer k;
    k = 0;
    for (integer i = 0; i < 2; i++)
    begin
        if (a)
        begin
            break;
        end
        k = k + 1;
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_break2 (test_break.cpp:54:5) 

always_comb 
begin : for_break2     // test_break.cpp:54:5
    integer k;
    k = 0;
    for (integer i = 0; i < 2; i++)
    begin
        for (integer j = 0; j < 3; j++)
        begin
            if (a)
            begin
                break;
            end
            k = k + 1;
        end
        k = k - 1;
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_break3 (test_break.cpp:70:5) 

always_comb 
begin : for_break3     // test_break.cpp:70:5
    integer k;
    integer m;
    k = 0;
    m = si;
    if (m > 0)
    begin
        for (integer i = 0; i < 2; i++)
        begin
            if (a)
            begin
                break;
            end
            if (b)
            begin
                break;
            end
            k = k + 1;
        end
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_break4 (test_break.cpp:86:5) 

always_comb 
begin : for_break4     // test_break.cpp:86:5
    integer k;
    integer m;
    k = 0;
    m = si;
    if (m > 0)
    begin
        for (integer i = 0; i < 2; i++)
        begin
            if (a)
            begin
                if (b)
                begin
                    break;
                end
                k = k - 1;
                break;
            end
            k = k + 1;
        end
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_break5 (test_break.cpp:106:5) 

always_comb 
begin : for_break5     // test_break.cpp:106:5
    integer k;
    k = 0;
    for (integer i = 0; i < 2; i++)
    begin
        for (integer j = 0; j < 5; j++)
        begin
            if (a)
            begin
                if (b)
                begin
                    break;
                end
                k = 1;
                break;
            end
            k = 2;
        end
        k = 3;
    end
end

//------------------------------------------------------------------------------
// Method process: for_break6 (test_break.cpp:126:5) 

always_comb 
begin : for_break6     // test_break.cpp:126:5
    integer k;
    k = 0;
    for (integer i = 0; i < 2; i++)
    begin
        for (integer j = 0; j < 5; j++)
        begin
            if (b)
            begin
                break;
            end
            k = 2;
        end
        if (b)
        begin
            break;
        end
        k = 3;
    end
end

//------------------------------------------------------------------------------
// Method process: while_break1 (test_break.cpp:143:5) 

always_comb 
begin : while_break1     // test_break.cpp:143:5
    integer i;
    integer j;
    i = 10;
    while (i > 0)
    begin
        if (a)
        begin
            break;
        end
        i--;
    end
    i = 3;
    while (i > 0)
    begin
        j = 0;
        while (j < i)
        begin
            if (a)
            begin
                break;
            end
            j++;
        end
        i--;
    end
end

//------------------------------------------------------------------------------
// Method process: while_break2 (test_break.cpp:163:5) 

always_comb 
begin : while_break2     // test_break.cpp:163:5
    integer k;
    while (a)
    begin
        if (b)
        begin
            break;
        end
        k = 1;
    end
    while (a && !b)
    begin
        if (c || si == 1)
        begin
            break;
        end
        k = 2;
    end
end

//------------------------------------------------------------------------------
// Method process: do_while_break1 (test_break.cpp:183:5) 

always_comb 
begin : do_while_break1     // test_break.cpp:183:5
    integer i;
    integer j;
    i = 10;
    do
    begin
        if (a)
        begin
            break;
        end
        i--;
    end
    while (i > 0);
    i = 3;
    do
    begin
        j = 0;
        while (j < i)
        begin
            if (a)
            begin
                break;
            end
            j++;
        end
        i--;
    end
    while (i > 0);
end

//------------------------------------------------------------------------------
// Method process: do_while_break2 (test_break.cpp:202:5) 

always_comb 
begin : do_while_break2     // test_break.cpp:202:5
    integer k;
    integer i;
    do
    begin
        if (b)
        begin
            break;
        end
        k = 1;
    end
    while (a);
    i = 0;
    do
    begin
        if (i > 3)
        begin
            break;
        end
        i++;
    end
    while (a && !b);
end

endmodule


