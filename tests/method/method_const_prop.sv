//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// SystemC signals
logic a;
logic b;
logic clk;
logic nrst;


//------------------------------------------------------------------------------

A a_mod
(
  .clk(clk),
  .nrst(nrst),
  .a(a),
  .b(b)
);

endmodule



//==============================================================================
//
// Module: A (test_const_prop.cpp:941:5)
//
module A // "b_mod.a_mod"
(
    input logic clk,
    input logic nrst,
    input logic a,
    output logic b
);

// SystemC signals
logic c;
logic arr1[3];
logic arr3[3];
logic port_req[3];
logic port_oper[3];
logic [1:0] rr_first_indx;
logic [1:0] port_bindx[3];

//------------------------------------------------------------------------------
// Method process: intrControlProc (test_const_prop.cpp:484:5) 

always_comb 
begin : intrControlProc     // test_const_prop.cpp:484:5
    logic b_1;
    integer i;
    b_1 = 0;
    i = 0;
end

//------------------------------------------------------------------------------
// Method process: chooseRequestProc (test_const_prop.cpp:494:5) 

always_comb 
begin : chooseRequestProc     // test_const_prop.cpp:494:5
end

//------------------------------------------------------------------------------
// Method process: ackProc2R2Wcache4 (test_const_prop.cpp:538:5) 

always_comb 
begin : ackProc2R2Wcache4     // test_const_prop.cpp:538:5
    logic readFirstAccess_flat[3];
    logic readSecndAccess_flat[3];
    logic writeFirstAccess_flat[3];
    logic writeSecndAccess_flat[3];
    logic [1:0] TMP_0;
    logic [1:0] portIndx;
    logic [1:0] TMP_2;
    integer unsigned iter;
    logic [1:0] portIndx_1;
    logic [1:0] blockIndx;
    logic accessPermit;
    for (integer i = 0; i < 3; i++)
    begin
        readFirstAccess_flat[i] = a;
        readSecndAccess_flat[i] = 0;
        writeFirstAccess_flat[i] = a;
        writeSecndAccess_flat[i] = 0;
    end
    // Call getFirstPortIndx() begin
    TMP_0 = rr_first_indx;
    // Call getFirstPortIndx() end
    portIndx = TMP_0;
    for (integer unsigned i = 1; i < 3; i++)
    begin
        iter = i; portIndx_1 = portIndx;
        // Call getNextPortIndex() begin
        if (1)
        begin
            if (0)
            begin
            end else begin
                if (iter == 1)
                begin
                    TMP_2 = rr_first_indx;
                end else begin
                    TMP_2 = (portIndx_1 == 0) ? 2 : ((portIndx_1 == 3 - 1) ? 0 : (portIndx_1 + 1));
                end
            end
        end
        // Call getNextPortIndex() end
        portIndx = TMP_2;
        blockIndx = port_bindx[portIndx];
        accessPermit = port_req[portIndx];
        if (!port_oper[portIndx])
        begin
            if (!readFirstAccess_flat[blockIndx])
            begin
                readFirstAccess_flat[blockIndx] = accessPermit;
            end else begin
                if (!readSecndAccess_flat[blockIndx])
                begin
                    readSecndAccess_flat[blockIndx] = accessPermit;
                end else begin
                    accessPermit = 0;
                end
            end
        end else begin
            if (!writeFirstAccess_flat[blockIndx])
            begin
                writeFirstAccess_flat[blockIndx] = accessPermit;
            end else begin
                if (!writeSecndAccess_flat[blockIndx])
                begin
                    writeSecndAccess_flat[blockIndx] = accessPermit;
                end else begin
                    accessPermit = 0;
                end
            end
        end
    end
end

//------------------------------------------------------------------------------
// Method process: simple_if1 (test_const_prop.cpp:598:5) 

always_comb 
begin : simple_if1     // test_const_prop.cpp:598:5
    integer i;
    i = 1;
    if (1)
    begin
        i = 2;
    end
end

//------------------------------------------------------------------------------
// Method process: simple_if2 (test_const_prop.cpp:608:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : simple_if2     // test_const_prop.cpp:608:5
    integer i;
    i = 1;
    m = i + 1;
    if (a)
    begin
        if (0)
        begin
        end else begin
            i = 3;
        end
    end else begin
        if (1)
        begin
            i = 4;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: if_in_func1 (test_const_prop.cpp:634:5) 

always_comb 
begin : if_in_func1     // test_const_prop.cpp:634:5
    integer i;
    integer j;
    i = 1;
    // Call f1() begin
    j = 1;
    if (1)
    begin
        j = 2;
    end
    // Call f1() end
end

//------------------------------------------------------------------------------
// Method process: if_in_func2 (test_const_prop.cpp:648:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : if_in_func2     // test_const_prop.cpp:648:5
    // Call f2() begin
    m = 3;
    // Call f2() end
end

//------------------------------------------------------------------------------
// Method process: if_in_func3 (test_const_prop.cpp:659:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : if_in_func3     // test_const_prop.cpp:659:5
    m = 4;
end

//------------------------------------------------------------------------------
// Method process: const_param_func (test_const_prop.cpp:672:5) 

always_comb 
begin : const_param_func     // test_const_prop.cpp:672:5
    integer unsigned val;
    val = 1;
    // Call f4() begin
    // Call f4_() begin
    val++;
    // Call f4_() end
    // Call f4() end
end

//------------------------------------------------------------------------------
// Method process: if_in_func5 (test_const_prop.cpp:681:5) 

always_comb 
begin : if_in_func5     // test_const_prop.cpp:681:5
    integer TMP_0;
    integer i;
    // Call f5() begin
    TMP_0 = 5;
    // Call f5() end
    i = TMP_0;
end

//------------------------------------------------------------------------------
// Method process: simple_switch1 (test_const_prop.cpp:688:5) 

always_comb 
begin : simple_switch1     // test_const_prop.cpp:688:5
    integer i;
    i = 2;
    case (2)
    1 : begin
    end
    2 : begin
        i = 3;
    end
    default : begin
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: simple_switch2 (test_const_prop.cpp:698:5) 

always_comb 
begin : simple_switch2     // test_const_prop.cpp:698:5
    integer i;
    i = a;
    case (i)
    1 : begin
        i = 2;
    end
    2 : begin
        i = 3;
    end
    default : begin
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: simple_switch3 (test_const_prop.cpp:708:5) 

always_comb 
begin : simple_switch3     // test_const_prop.cpp:708:5
    integer i;
    i = 3;
    case (3)
    1 : begin
    end
    2 : begin
    end
    default : begin
        i = 4;
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: simple_binary1 (test_const_prop.cpp:718:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : simple_binary1     // test_const_prop.cpp:718:5
    integer i;
    i = 1;
    if (1)
    begin
        m = 3;
    end
end

//------------------------------------------------------------------------------
// Method process: simple_binary2 (test_const_prop.cpp:730:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : simple_binary2     // test_const_prop.cpp:730:5
    integer i;
    i = 0;
    if (1)
    begin
        m = 0;
    end
    if (1 && a)
    begin
        m = 2;
    end
    if ((i == 1 || i == 0) && a)
    begin
        m = 3;
    end
    if ((i == 1 || a) && c)
    begin
        m = 4;
    end
    if (1 && c)
    begin
        m = 5;
    end
    if ((a || i == 0) && c)
    begin
        m = 6;
    end
    if ((a || i == 1) && c)
    begin
        m = 7;
    end
end

//------------------------------------------------------------------------------
// Method process: simple_binary3 (test_const_prop.cpp:766:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : simple_binary3     // test_const_prop.cpp:766:5
    integer i;
    i = 0;
    if ((i == 0 && i == 1) || a)
    begin
        m = 2;
    end
    if ((i == 0 && a) || c)
    begin
        m = 3;
    end
    if (0 || c)
    begin
        m = 4;
    end
    if ((i == 0 && a) && c)
    begin
        m = 5;
    end
end

//------------------------------------------------------------------------------
// Method process: simple_cond1 (test_const_prop.cpp:791:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : simple_cond1     // test_const_prop.cpp:791:5
    integer i;
    i = 1;
    m = 2;
end

//------------------------------------------------------------------------------
// Method process: double_if1 (test_const_prop.cpp:188:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if1     // test_const_prop.cpp:188:5
    if (a)
    begin
        if (b)
        begin
            m = 1;
        end else begin
            m = 2;
        end
    end else begin
        if (b)
        begin
            m = 3;
        end else begin
            m = 4;
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if2 (test_const_prop.cpp:208:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if2     // test_const_prop.cpp:208:5
    if (a)
    begin
        if (b)
        begin
            m = 1;
        end else begin
            m = 2;
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if3 (test_const_prop.cpp:222:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if3     // test_const_prop.cpp:222:5
    if (a)
    begin
        if (b)
        begin
            m = 1;
        end else begin
            m = 2;
        end
    end else begin
        if (b)
        begin
            m = 3;
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if4 (test_const_prop.cpp:240:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if4     // test_const_prop.cpp:240:5
    if (a)
    begin
        if (b)
        begin
            m = 1;
        end else begin
            if (c)
            begin
                m = 2;
            end else begin
                m = 3;
            end
        end
    end else begin
        if (b)
        begin
            m = 4;
        end else begin
            if (c)
            begin
                m = 5;
            end else begin
                m = 6;
            end
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if5 (test_const_prop.cpp:270:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if5     // test_const_prop.cpp:270:5
    integer TMP_0;
    if (a)
    begin
        if (a)
        begin
            if (b)
            begin
                m = 1;
            end else begin
                if (c)
                begin
                    if (1)
                    begin
                        // Call f() begin
                        TMP_0 = 5;
                        // Call f() end
                        m = TMP_0;
                    end
                end
            end
        end
    end
end

//------------------------------------------------------------------------------
// Method process: double_if6 (test_const_prop.cpp:290:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if6     // test_const_prop.cpp:290:5
    if (a)
    begin
        if (b)
        begin
            m = 1;
        end else begin
            if (c)
            begin
                m = 2;
            end else begin
                m = 3;
            end
        end
    end else begin
        if (b)
        begin
            if (c)
            begin
                m = 4;
            end else begin
                m = 5;
            end
        end else begin
            if (c)
            begin
                m = 6;
            end else begin
                m = 7;
            end
        end
    end
end

//------------------------------------------------------------------------------
// Method process: seq_if (test_const_prop.cpp:460:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : seq_if     // test_const_prop.cpp:460:5
    if (a)
    begin
        m = 1;
    end else begin
        if (b)
        begin
            m = 2;
        end else begin
            if (c)
            begin
                m = 3;
            end else begin
                m = 4;
            end
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if_for1 (test_const_prop.cpp:322:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if_for1     // test_const_prop.cpp:322:5
    if (a)
    begin
        if (b)
        begin
        end else begin
            if (c)
            begin
                m = 2;
            end else begin
                m = 3;
            end
        end
    end else begin
        if (b)
        begin
            m = 4;
        end else begin
            if (c)
            begin
                for (integer i = 0; i < 2; i++)
                begin
                    if (a)
                    begin
                        break;
                    end
                end
            end else begin
                m = 6;
            end
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if_for2 (test_const_prop.cpp:351:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if_for2     // test_const_prop.cpp:351:5
    if (a)
    begin
        if (b)
        begin
            for (integer i = 0; i < 2; i++)
            begin
                if (c)
                begin
                    m = 1;
                end
            end
        end else begin
            if (c)
            begin
                m = 2;
            end else begin
                m = 3;
            end
        end
    end else begin
        if (b)
        begin
            m = 4;
        end else begin
            if (c)
            begin
                for (integer i = 0; i < 2; i++)
                begin
                    if (c)
                    begin
                        m = 1;
                    end else begin
                        m = 2;
                    end
                end
            end else begin
                m = 6;
                if (c)
                begin
                    m = 1;
                end else begin
                    m = 2;
                end
            end
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if_while (test_const_prop.cpp:392:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if_while     // test_const_prop.cpp:392:5
    integer i;
    integer i_1;
    integer j;
    if (a)
    begin
        i = 0;
        if (b)
        begin
            while (i < 2)
            begin
                i++;
            end
        end else begin
            if (c)
            begin
                m = 2;
            end else begin
                m = 3;
            end
        end
    end else begin
        i_1 = 0;
        while (i_1 < 2)
        begin
            if (b)
            begin
                m = 4;
            end else begin
                j = 1;
                while (j < 3)
                begin
                    j++;
                    if (c)
                    begin
                        break;
                    end
                end
            end
            i_1++;
        end
        if (c)
        begin
            for (integer i = 0; i < 2; i++)
            begin
                if (c)
                begin
                    m = 1;
                end else begin
                    m = 2;
                end
            end
        end
    end
    m = 0;
end

//------------------------------------------------------------------------------
// Method process: double_if_break (test_const_prop.cpp:435:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : double_if_break     // test_const_prop.cpp:435:5
    for (integer i = 0; i < 2; i++)
    begin
        if (a)
        begin
            m = 1;
            if (b)
            begin
                m = 2;
                break;
            end
            break;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: false_if_break (test_const_prop.cpp:450:5) 

always_comb 
begin : false_if_break     // test_const_prop.cpp:450:5
end

//------------------------------------------------------------------------------
// Method process: multiple_calls1 (test_const_prop.cpp:853:5) 

always_comb 
begin : multiple_calls1     // test_const_prop.cpp:853:5
    integer k_1;
    if (a)
    begin
        // Call g() begin
        k_1 = 0;
        // Call g() end
    end
    // Call g() begin
    k_1 = 0;
    // Call g() end
end

//------------------------------------------------------------------------------
// Method process: multiple_calls2 (test_const_prop.cpp:862:5) 

always_comb 
begin : multiple_calls2     // test_const_prop.cpp:862:5
    integer k_1;
    // Call g() begin
    k_1 = 0;
    // Call g() end
    if (a)
    begin
        // Call g() begin
        k_1 = 0;
        // Call g() end
    end
end

//------------------------------------------------------------------------------
// Method process: mstrResponseMuxProc (test_const_prop.cpp:133:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : mstrResponseMuxProc     // test_const_prop.cpp:133:5
    integer i;
    i = a;
    if ((arr1[i] && 1) || arr3[i])
    begin
        m = 1;
    end
end

//------------------------------------------------------------------------------
// Method process: NoReturnFatalError (test_const_prop.cpp:159:5) 

always_comb 
begin : NoReturnFatalError     // test_const_prop.cpp:159:5
end

//------------------------------------------------------------------------------
// Method process: NoReturnFatalError2 (test_const_prop.cpp:168:5) 

always_comb 
begin : NoReturnFatalError2     // test_const_prop.cpp:168:5
    logic TMP_0;
    integer unsigned portId;
    portId = a;
    // Call useWriteResp() begin
    case (portId)
    0 : begin
        TMP_0 = 1;
    end
    1 : begin
        TMP_0 = 1;
    end
    default : begin
        TMP_0 = 1;
    end
    endcase
    // Call useWriteResp() end
end

//------------------------------------------------------------------------------
// Method process: return_const_in_if (test_const_prop.cpp:880:5) 

always_comb 
begin : return_const_in_if     // test_const_prop.cpp:880:5
    integer i;
    integer TMP_0;
    i = a;
    // Call getConst() begin
    TMP_0 = 2;
    // Call getConst() end
end

//------------------------------------------------------------------------------
// Method process: return_const_in_for (test_const_prop.cpp:886:5) 

always_comb 
begin : return_const_in_for     // test_const_prop.cpp:886:5
    integer x;
    integer TMP_0;
    integer N;
    x = 0;
    // Call getConst() begin
    TMP_0 = 2;
    // Call getConst() end
    N = TMP_0;
    for (integer i = 0; i < N; ++i)
    begin
        x++;
    end
end

//------------------------------------------------------------------------------
// Method process: return_const_in_for2 (test_const_prop.cpp:895:5) 

always_comb 
begin : return_const_in_for2     // test_const_prop.cpp:895:5
    integer x;
    integer TMP_0;
    integer TMP_1;
    x = 0;
    // Call getConst() begin
    TMP_0 = 2;
    // Call getConst() end
    for (integer i = 0; i < TMP_0; ++i)
    begin
        x++;
        // Call getConst() begin
        TMP_0 = 2;
        // Call getConst() end
    end
end

//------------------------------------------------------------------------------
// Method process: return_const_in_for3 (test_const_prop.cpp:903:5) 

always_comb 
begin : return_const_in_for3     // test_const_prop.cpp:903:5
    integer x;
    integer TMP_0;
    x = 0;
    // Call getConst() begin
    TMP_0 = 2;
    // Call getConst() end
    for (integer i = TMP_0; i < 4; ++i)
    begin
        x++;
    end
end

//------------------------------------------------------------------------------
// Method process: return_const_in_while (test_const_prop.cpp:911:5) 

always_comb 
begin : return_const_in_while     // test_const_prop.cpp:911:5
    integer i;
    integer TMP_0;
    integer TMP_1;
    i = 0;
    // Call getConst() begin
    TMP_0 = 2;
    // Call getConst() end
    while (i < TMP_0)
    begin
        i++;
        // Call getConst() begin
        TMP_0 = 2;
        // Call getConst() end
    end
end

//------------------------------------------------------------------------------
// Method process: return_const_in_while2 (test_const_prop.cpp:918:5) 

always_comb 
begin : return_const_in_while2     // test_const_prop.cpp:918:5
    integer i;
    integer TMP_0;
    integer i_1;
    integer TMP_1;
    i = 0;
    i_1 = 1;
    // Call getConst_() begin
    TMP_0 = i_1 + 1;
    // Call getConst_() end
    while (i < TMP_0)
    begin
        i++;
        i_1 = 1;
        // Call getConst_() begin
        TMP_0 = i_1 + 1;
        // Call getConst_() end
    end
end

//------------------------------------------------------------------------------
// Method process: complex_if_level (test_const_prop.cpp:109:5) 

// Process-local variables
logic signed [31:0] k;
logic signed [31:0] m;
logic signed [31:0] n;

always_comb 
begin : complex_if_level     // test_const_prop.cpp:109:5
    integer aa;
    integer bb;
    if (|k)
    begin
        if (|m)
        begin
            if (|n)
            begin
                if (k > n)
                begin
                    aa = 0;
                end
            end else begin
                if (1)
                begin
                    bb = 1;
                end
            end
        end
    end
end

//------------------------------------------------------------------------------
// Method process: not_test (test_const_prop.cpp:175:5) 

always_comb 
begin : not_test     // test_const_prop.cpp:175:5
    logic [2:0] x;
    logic [2:0] y;
    logic b_1;
    x = 3;
    y = ~x;
    b_1 = x == y;
end

endmodule


