//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);


//------------------------------------------------------------------------------

A a_mod
(

);

endmodule



//==============================================================================
//
// Module: A (test_switch_const.cpp:230:5)
//
module A // "b_mod.a_mod"
(
);

// SystemC signals
logic [2:0] s;

//------------------------------------------------------------------------------
// Method process: switch_const1 (test_switch_const.cpp:31:5) 

always_comb 
begin : switch_const1     // test_switch_const.cpp:31:5
    integer i;
    integer j;
    i = 0;
    j = 0;
    case (1)
    1 : begin
        i = 1;
        j = 2;
    end
    2 : begin
    end
    default : begin
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const2 (test_switch_const.cpp:45:5) 

always_comb 
begin : switch_const2     // test_switch_const.cpp:45:5
    integer i;
    integer j;
    i = 0;
    j = 0;
    case (2)
    1 : begin
    end
    2 : begin
        i++;
        j++;
    end
    default : begin
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const3 (test_switch_const.cpp:59:5) 

always_comb 
begin : switch_const3     // test_switch_const.cpp:59:5
    integer i;
    integer j;
    i = 0;
    j = 0;
    case (3)
    1 : begin
    end
    2 : begin
    end
    default : begin
        i = j;
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_non_const (test_switch_const.cpp:74:5) 

always_comb 
begin : switch_non_const     // test_switch_const.cpp:74:5
    integer i;
    integer j;
    i = 0;
    j = 0;
    case (s)
    1 : begin
        i = 1;
        j = 2;
    end
    2 : begin
        i++;
        j++;
    end
    default : begin
        i = j;
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const_if1 (test_switch_const.cpp:88:5) 

always_comb 
begin : switch_const_if1     // test_switch_const.cpp:88:5
    integer k;
    k = 0;
    case (3)
    1 : begin
    end
    3 : begin
        if (s == 1)
        begin
            k = 4;
        end
    end
    default : begin
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const_if1a (test_switch_const.cpp:107:5) 

always_comb 
begin : switch_const_if1a     // test_switch_const.cpp:107:5
    integer k;
    k = 0;
    case (3)
    1 : begin
    end
    3 : begin
        if (1)
        begin
            k = 4;
        end
    end
    default : begin
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const_for1 (test_switch_const.cpp:126:5) 

always_comb 
begin : switch_const_for1     // test_switch_const.cpp:126:5
    integer k;
    case (2)
    1 : begin
    end
    2 : begin
        for (integer i = 0; i < 7; i++)
        begin
            k = k + 1;
            if (k == s)
            begin
                break;
            end
        end
    end
    default : begin
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const_for1a (test_switch_const.cpp:141:6) 

always_comb 
begin : switch_const_for1a     // test_switch_const.cpp:141:6
    integer k;
    case (3)
    1 : begin
    end
    2 : begin
    end
    default : begin
        k = 10;
    end
    endcase
    for (integer j = 0; j < 7; j++)
    begin
        k = k + 1;
        if (k == s)
        begin
            break;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: switch_const_empty1 (test_switch_const.cpp:160:5) 

always_comb 
begin : switch_const_empty1     // test_switch_const.cpp:160:5
    integer i;
    i = 0;
    case (1)
    1 : begin  // Empty case without break
        i = 2;
    end
    2 : begin
        i = 2;
    end
    default : begin
    end
    endcase
    i = 0;
    case (1)
    1 : begin  // Empty case without break
        i = 2;
    end
    2 : begin
        i = 2;
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const_empty2 (test_switch_const.cpp:180:5) 

always_comb 
begin : switch_const_empty2     // test_switch_const.cpp:180:5
    integer i;
    i = 0;
    case (2)
    1 : begin  // Empty case without break
        i = 2;
    end
    2 : begin
        i = 2;
    end
    default : begin
    end
    endcase
    i = 0;
    case (2)
    1 : begin  // Empty case without break
        i = 2;
    end
    2 : begin
        i = 2;
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switch_const_empty3 (test_switch_const.cpp:200:5) 

always_comb 
begin : switch_const_empty3     // test_switch_const.cpp:200:5
    integer i;
    i = 0;
    case (3)
    1 : begin  // Empty case without break
    end
    2 : begin
    end
    endcase
    case (3)
    1 : begin  // Empty case without break
    end
    2 : begin
    end
    default : begin
        i = 3;
    end
    endcase
end

endmodule


