//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// SystemC signals
logic clk;
logic s1;
logic s2;


//------------------------------------------------------------------------------

A a_mod
(
  .clk(clk),
  .out(s2),
  .p(s1)
);

endmodule



//==============================================================================
//
// Module: A (test_fcall_ref.cpp:362:5)
//
module A // "b_mod.a_mod"
(
    input logic clk,
    output logic out,
    output logic p
);

// SystemC signals
logic [3:0] sig;
logic [3:0] si;
logic [7:0] sig2;
logic [3:0] sig3;
logic [3:0] sig_arr[3];
logic [7:0] sig_arr2[3];

//------------------------------------------------------------------------------
// Method process: const_reference (test_fcall_ref.cpp:121:5) 

always_comb 
begin : const_reference     // test_fcall_ref.cpp:121:5
    integer TMP_0;
    integer val;
    val = 1;
    // Call const_ref3() begin
    if (1)
    begin
        TMP_0 = 1;
    end
    // Call const_ref3() end
end

//------------------------------------------------------------------------------
// Method process: const_reference_sc (test_fcall_ref.cpp:127:5) 

always_comb 
begin : const_reference_sc     // test_fcall_ref.cpp:127:5
    logic [1:0] i;
    logic [1:0] TMP_0;
    logic [1:0] j;
    logic [1:0] TMP_1;
    logic [3:0] val;
    logic [1:0] j_1;
    logic [1:0] TMP_2;
    logic [1:0] TMP_3;
    logic [3:0] j_2;
    logic [1:0] TMP_4;
    logic [1:0] TMP_5;
    i = 1;
    // Call const_ref() begin
    j = i;
    TMP_0 = j;
    // Call const_ref() end
    i = TMP_0;
    val = 2;
    // Call const_ref2() begin
    j_1 = val[1 : 0];
    TMP_1 = j_1 + 1;
    // Call const_ref2() end
    i = TMP_1;
    val = 1;
    // Call const_ref2() begin
    j_1 = val[1 : 0];
    TMP_2 = j_1 + 1;
    // Call const_ref2() end
    i = TMP_2;
    val = 2;
    // Call const_ref2() begin
    j_1 = val[1 : 0];
    TMP_3 = j_1 + 1;
    // Call const_ref2() end
    i = TMP_3;
    j_2 = 5;
    // Call const_ref2() begin
    j_1 = j_2[1 : 0];
    TMP_4 = j_1 + 1;
    // Call const_ref2() end
    i = TMP_4;
    val = j_2 + 1;
    // Call const_ref2() begin
    j_1 = val[1 : 0];
    TMP_5 = j_1 + 1;
    // Call const_ref2() end
    i = TMP_5;
end

//------------------------------------------------------------------------------
// Method process: const_reference_noninit (test_fcall_ref.cpp:143:5) 

always_comb 
begin : const_reference_noninit     // test_fcall_ref.cpp:143:5
    integer k_1;
    integer TMP_0;
    integer j;
    integer m_1;
    integer TMP_1;
    // Call const_ref() begin
    j = k_1;
    TMP_0 = j;
    // Call const_ref() end
    m_1 = 1;
    // Call const_ref() begin
    j = m_1;
    TMP_1 = j;
    // Call const_ref() end
end

//------------------------------------------------------------------------------
// Method process: const_reference_expr (test_fcall_ref.cpp:153:5) 

always_comb 
begin : const_reference_expr     // test_fcall_ref.cpp:153:5
    logic [3:0] TMP_0;
    logic [3:0] j;
    logic [1:0] TMP_1;
    logic [1:0] val;
    logic [1:0] j_1;
    // Call const_ref() begin
    j = si;
    TMP_0 = j;
    // Call const_ref() end
    val = 2'(si[1 : 0]);
    // Call const_ref() begin
    j_1 = val;
    TMP_1 = j_1;
    // Call const_ref() end
end

//------------------------------------------------------------------------------
// Method process: const_reference_sig (test_fcall_ref.cpp:167:5) 

always_comb 
begin : const_reference_sig     // test_fcall_ref.cpp:167:5
    logic [1:0] TMP_0;
    logic [1:0] j;
    logic [1:0] TMP_1;
    logic [1:0] TMP_2;
    logic [3:0] val;
    logic [1:0] TMP_3;
    logic [1:0] TMP_4;
    logic [3:0] l;
    // Call const_ref2() begin
    j = sig[1 : 0];
    TMP_0 = j + 1;
    // Call const_ref2() end
    // Call const_ref2() begin
    j = sig[1 : 0];
    TMP_1 = j + 1;
    // Call const_ref2() end
    val = sig + 1;
    // Call const_ref2() begin
    j = val[1 : 0];
    TMP_2 = j + 1;
    // Call const_ref2() end
    val = sig2;
    // Call const_ref2() begin
    j = val[1 : 0];
    TMP_3 = j + 1;
    // Call const_ref2() end
    val = sig3;
    // Call const_ref2() begin
    j = val[1 : 0];
    TMP_4 = j + 1;
    // Call const_ref2() end
    // Call const_ref_sig() begin
    l = sig;
    // Call const_ref_sig() end
end

//------------------------------------------------------------------------------
// Method process: const_reference_sig_arr (test_fcall_ref.cpp:183:5) 

always_comb 
begin : const_reference_sig_arr     // test_fcall_ref.cpp:183:5
    logic [1:0] TMP_0;
    logic [1:0] j;
    logic [1:0] TMP_1;
    logic [1:0] TMP_2;
    logic [3:0] val;
    logic [1:0] TMP_3;
    // Call const_ref2() begin
    j = sig_arr[1][1 : 0];
    TMP_0 = j + 1;
    // Call const_ref2() end
    // Call const_ref2() begin
    j = sig_arr[sig][1 : 0];
    TMP_1 = j + 1;
    // Call const_ref2() end
    val = sig_arr2[1];
    // Call const_ref2() begin
    j = val[1 : 0];
    TMP_2 = j + 1;
    // Call const_ref2() end
    val = sig_arr2[sig];
    // Call const_ref2() begin
    j = val[1 : 0];
    TMP_3 = j + 1;
    // Call const_ref2() end
end

//------------------------------------------------------------------------------
// Method process: scint_reference (test_fcall_ref.cpp:196:5) 

always_comb 
begin : scint_reference     // test_fcall_ref.cpp:196:5
    logic [2:0] x;
    logic [1:0] k_1;
    integer j;
    logic [1:0] a;
    x = 1;
    // Call ref() begin
    k_1 = x[2 : 1];
    x = k_1 + 1;
    // Call ref() end
    x[2 : 1] = 1;
    j = x[0];
    // Call ref_par() begin
    a = x[1 : 0];
    // Call ref_par() end
end

//------------------------------------------------------------------------------
// Method process: reference_inner_call (test_fcall_ref.cpp:225:5) 

always_comb 
begin : reference_inner_call     // test_fcall_ref.cpp:225:5
    logic [1:0] TMP_0;
    logic [2:0] x;
    logic [1:0] k_1;
    logic [1:0] TMP_1;
    logic [3:0] par;
    logic [1:0] TMP_2;
    logic [1:0] j;
    logic [1:0] a;
    // Call unused_return() begin
    TMP_0 = 1;
    // Call unused_return() end
    x = 2;
    // Call ref_with_call() begin
    // Call ref() begin
    k_1 = x[2 : 1];
    x = k_1 + 1;
    // Call ref() end
    // Call ref_with_call() end
    par = 3;
    // Call const_ref_with_call() begin
    // Call const_ref2() begin
    j = par[1 : 0];
    TMP_2 = j + 1;
    // Call const_ref2() end
    a = TMP_2 + 1;
    TMP_1 = a;
    // Call const_ref_with_call() end
end

//------------------------------------------------------------------------------
// Method process: pointer_param (test_fcall_ref.cpp:275:5) 

// Process-local variables
logic signed [31:0] q;
logic [2:0] s;
logic r;

always_comb 
begin : pointer_param     // test_fcall_ref.cpp:275:5
    integer i;
    integer TMP_0;
    integer TMP_1;
    integer i_1;
    integer TMP_2;
    integer i_2;
    q = 1;
    // Call ptr1() begin
    TMP_0 = q + 1;
    // Call ptr1() end
    i = TMP_0;
    q = i;
    // Call ptr2() begin
    if (r)
    begin
        i_1 = q;
    end else begin
        i_1 = 0;
    end
    TMP_1 = i_1;
    // Call ptr2() end
    i = TMP_1;
    // Call ptr3() begin
    i_2 = s[2 : 1];
    s = 1;
    TMP_2 = i_2;
    // Call ptr3() end
    i = TMP_2;
end

//------------------------------------------------------------------------------
// Method process: pointer_param_modfied (test_fcall_ref.cpp:290:5) 

// Process-local variables
logic signed [31:0] m;
logic signed [31:0] q;

always_comb 
begin : pointer_param_modfied     // test_fcall_ref.cpp:290:5
    integer i;
    m = 1;
    // Call ptr4() begin
    i = m + 1;
    m = i;
    // Call ptr4() end
    q = 1;
    // Call ptr4() begin
    i = q + 1;
    q = i;
    // Call ptr4() end
end

//------------------------------------------------------------------------------
// Method process: pointer_inner_call (test_fcall_ref.cpp:307:5) 

// Process-local variables
logic [2:0] s;
logic [2:0] n;

always_comb 
begin : pointer_inner_call     // test_fcall_ref.cpp:307:5
    integer i;
    integer TMP_0;
    integer i_1;
    integer TMP_1;
    s = 2;
    // Call ptr_with_call() begin
    i = s;
    // Call ptr3() begin
    i_1 = s[2 : 1];
    s = 1;
    TMP_0 = i_1;
    // Call ptr3() end
    // Call ptr_with_call() end
    n = 2;
    // Call ptr_with_call() begin
    i = n;
    // Call ptr3() begin
    i_1 = n[2 : 1];
    n = 1;
    TMP_1 = i_1;
    // Call ptr3() end
    // Call ptr_with_call() end
end

//------------------------------------------------------------------------------
// Method process: recursive_ref (test_fcall_ref.cpp:330:5) 

always_comb 
begin : recursive_ref     // test_fcall_ref.cpp:330:5
    logic [3:0] x;
    logic [3:0] TMP_0;
    integer res;
    x = sig;
    // Call rec_ref() begin
    // Call rec_ref_() begin
    x++;
    // Call rec_ref_() end
    TMP_0 = x + 1;
    // Call rec_ref() end
    res = TMP_0;
end

//------------------------------------------------------------------------------
// Method process: recursive_ref_const (test_fcall_ref.cpp:349:5) 

always_comb 
begin : recursive_ref_const     // test_fcall_ref.cpp:349:5
    logic [3:0] TMP_0;
    integer TMP_1;
    integer res;
    // Call rec_ref_const() begin
    // Call rec_ref_const_() begin
    TMP_1 = sig + 1;
    // Call rec_ref_const_() end
    TMP_0 = TMP_1 + 1;
    // Call rec_ref_const() end
    res = TMP_0;
end

endmodule


