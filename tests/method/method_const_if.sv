//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.4
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(

);

endmodule



//==============================================================================
//
// Module: A (test_const_if.cpp:370:5)
//
module A // "b_mod.a_mod"
(
);

// Variables generated for SystemC signals
logic s;
logic [3:0] ms;
logic [3:0] ns;

// Local parameters generated for C++ constants
localparam logic [2:0] CONST_B = 5;
localparam logic CONST_A = 1;
localparam logic [31:0] CONST_C = 5;
localparam logic [31:0] CONST_Z = 0;

//------------------------------------------------------------------------------
// Method process: if_const (test_const_if.cpp:43:5) 

always_comb 
begin : if_const     // test_const_if.cpp:43:5
    integer k;
    k = 0;
    k = 1;
    k = 1;
    k = 1;
    k = 3;
    if (1 && s)
    begin
        k = 3;
    end
end

//------------------------------------------------------------------------------
// Method process: fcall_const (test_const_if.cpp:85:5) 

always_comb 
begin : fcall_const     // test_const_if.cpp:85:5
    integer k;
    integer TMP_0;
    integer i;
    integer TMP_1;
    integer i_1;
    integer TMP_2;
    k = 0;
    i = 1;
    // Call f() begin
    TMP_0 = i - 1;
    // Call f() end
    k = 2;
    i_1 = 0;
    // Call g() begin
    TMP_1 = i_1 + 1;
    // Call g() end
    k = 1;
    k = 0;
    // Call h() begin
    TMP_2 = k;
    // Call h() end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: logic_or_const (test_const_if.cpp:111:5) 

always_comb 
begin : logic_or_const     // test_const_if.cpp:111:5
    integer k;
    integer i;
    logic b1;
    logic b2;
    integer TMP_0;
    integer i_1;
    logic b3;
    integer TMP_2;
    integer i_2;
    logic b4;
    integer TMP_4;
    logic b5;
    integer TMP_6;
    logic b6;
    logic b7;
    logic b8;
    k = 0;
    b1 = 1;
    b2 = 1;
    i_1 = 1;
    // Call f() begin
    TMP_0 = i_1 - 1;
    // Call f() end
    b3 = |TMP_0 || b2;
    i_2 = 0;
    // Call g() begin
    TMP_2 = i_2 + 1;
    // Call g() end
    b4 = |CONST_Z || |TMP_2;
    i_1 = 1;
    // Call f() begin
    TMP_4 = i_1 - 1;
    // Call f() end
    b5 = |CONST_Z || |TMP_4;
    i_2 = 1;
    // Call g() begin
    TMP_6 = i_2 + 1;
    // Call g() end
    b6 = b5 || !(|TMP_6);
    b7 = !b2 || 0 || |CONST_Z;
    b8 = b7 || |CONST_Z || b2;
end

//------------------------------------------------------------------------------
// Method process: if_logic_or (test_const_if.cpp:135:6) 

always_comb 
begin : if_logic_or     // test_const_if.cpp:135:6
    integer k;
    integer TMP_0;
    integer i;
    integer TMP_1;
    integer i_1;
    integer TMP_2;
    integer TMP_3;
    integer TMP_4;
    integer TMP_5;
    k = 0;
    k = 1;
    k = 1;
    i = 0;
    // Call g() begin
    TMP_0 = i + 1;
    // Call g() end
    k = 1;
    i_1 = 1;
    // Call f() begin
    TMP_1 = i_1 - 1;
    // Call f() end
    k = 2;
    i_1 = 1;
    // Call f() begin
    TMP_2 = i_1 - 1;
    // Call f() end
    i = -2'sd1;
    // Call g() begin
    TMP_3 = i + 1;
    // Call g() end
    k = 2;
    i_1 = 1;
    // Call f() begin
    TMP_4 = i_1 - 1;
    // Call f() end
    i = -2'sd1;
    // Call g() begin
    TMP_5 = i + 1;
    // Call g() end
    k = 1;
end

//------------------------------------------------------------------------------
// Method process: logic_and_const (test_const_if.cpp:182:5) 

always_comb 
begin : logic_and_const     // test_const_if.cpp:182:5
    integer k;
    integer i;
    integer TMP_0;
    integer i_1;
    logic b1;
    logic b2;
    integer TMP_2;
    logic b3;
    logic b4;
    integer TMP_3;
    logic b5;
    logic b6;
    logic b7;
    logic b8;
    k = 0;
    i_1 = 2;
    // Call f() begin
    TMP_0 = i_1 - 1;
    // Call f() end
    b1 = CONST_A && |TMP_0;
    b2 = CONST_A && b1;
    i_1 = 1;
    // Call f() begin
    TMP_2 = i_1 - 1;
    // Call f() end
    b3 = 0;
    b4 = 0;
    i_1 = 1;
    // Call f() begin
    TMP_3 = i_1 - 1;
    // Call f() end
    b5 = !(|CONST_Z) && |TMP_3;
    b6 = 0;
    b7 = 0;
    b8 = b2 && CONST_A && !b7;
end

//------------------------------------------------------------------------------
// Method process: if_logic_and (test_const_if.cpp:206:5) 

always_comb 
begin : if_logic_and     // test_const_if.cpp:206:5
    integer k;
    integer TMP_0;
    integer i;
    integer TMP_1;
    integer TMP_2;
    integer TMP_3;
    integer TMP_4;
    integer i_1;
    k = 0;
    i = 1;
    // Call f() begin
    TMP_0 = i - 1;
    // Call f() end
    k = 2;
    i = 2;
    // Call f() begin
    TMP_1 = i - 1;
    // Call f() end
    k = 1;
    k = 2;
    k = 2;
    i = 1;
    // Call f() begin
    TMP_2 = i - 1;
    // Call f() end
    k = 2;
    i = 2;
    // Call f() begin
    TMP_3 = i - 1;
    // Call f() end
    i_1 = 0;
    // Call g() begin
    TMP_4 = i_1 + 1;
    // Call g() end
    k = 1;
end

//------------------------------------------------------------------------------
// Method process: complex_logic (test_const_if.cpp:253:5) 

always_comb 
begin : complex_logic     // test_const_if.cpp:253:5
    integer TMP_0;
    integer i;
    logic b1;
    integer TMP_2;
    logic b2;
    integer TMP_3;
    integer i_1;
    logic b3;
    integer TMP_4;
    integer TMP_5;
    logic b4;
    integer TMP_8;
    integer TMP_9;
    logic b5;
    i = 1;
    // Call f() begin
    TMP_0 = i - 1;
    // Call f() end
    b1 = |CONST_Z || 0;
    i = 2;
    // Call f() begin
    TMP_2 = i - 1;
    // Call f() end
    b2 = 1;
    i_1 = 0;
    // Call g() begin
    TMP_3 = i_1 + 1;
    // Call g() end
    b3 = 0;
    i = 1;
    // Call f() begin
    TMP_4 = i - 1;
    // Call f() end
    i = 1;
    // Call f() begin
    TMP_5 = i - 1;
    // Call f() end
    b4 = |TMP_4 || |CONST_Z || 0;
    i = 1;
    // Call f() begin
    TMP_8 = i - 1;
    // Call f() end
    i_1 = 1;
    // Call g() begin
    TMP_9 = i_1 + 1;
    // Call g() end
    b5 = !(|CONST_Z) && (|TMP_8 || CONST_A) && |TMP_9;
end

//------------------------------------------------------------------------------
// Method process: complex_cond_call (test_const_if.cpp:268:6) 

always_comb 
begin : complex_cond_call     // test_const_if.cpp:268:6
    integer k;
    integer TMP_0;
    integer TMP_1;
    integer i;
    integer TMP_2;
    integer i_1;
    integer TMP_3;
    integer TMP_4;
    integer TMP_5;
    k = 1;
    // Call h() begin
    TMP_0 = k;
    // Call h() end
    k = 1;
    i = 0;
    // Call g() begin
    TMP_1 = i + 1;
    // Call g() end
    i_1 = 2;
    // Call f() begin
    TMP_2 = i_1 - 1;
    // Call f() end
    k = 4;
    i = 0;
    // Call g() begin
    TMP_3 = i + 1;
    // Call g() end
    k = 5;
    i_1 = 2;
    // Call f() begin
    TMP_4 = i_1 - 1;
    // Call f() end
    i = 0;
    // Call g() begin
    TMP_5 = i + 1;
    // Call g() end
    k = 7;
end

//------------------------------------------------------------------------------
// Method process: if_complex_cond (test_const_if.cpp:304:5) 

// Process-local variables
logic [3:0] m;

always_comb 
begin : if_complex_cond     // test_const_if.cpp:304:5
    integer k;
    k = 1;
    m = ms;
    if (0 || m == 0)
    begin
        k = 1;
    end else begin
        k = 2;
    end
    if (m != 1 && (|CONST_Z || m > k))
    begin
        k = 1;
    end else begin
        k = 2;
    end
    k = 1;
    k = 1;
    k = 1;
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: very_complex_cond (test_const_if.cpp:340:5) 

// Process-local variables
logic [3:0] n;

always_comb 
begin : very_complex_cond     // test_const_if.cpp:340:5
    integer k;
    integer TMP_0;
    integer i;
    integer TMP_1;
    integer TMP_2;
    integer i_1;
    k = 1;
    n = ns;
    i = 2;
    // Call f() begin
    TMP_0 = i - 1;
    // Call f() end
    k = 2;
    i = 2;
    // Call f() begin
    TMP_1 = i - 1;
    // Call f() end
    k = 1;
    i_1 = 0;
    // Call g() begin
    TMP_2 = i_1 + 1;
    // Call g() end
    if (s && !(|n) || (k == n && CONST_A || !(|TMP_2)))
    begin
        k = 1;
    end else begin
        k = 2;
    end
end

endmodule


