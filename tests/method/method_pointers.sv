//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.7
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// SystemC signals
logic s1;
logic s2;


//------------------------------------------------------------------------------

A a_mod
(
  .out(s2),
  .p(s1)
);

endmodule



//==============================================================================
//
// Module: A (test_pointers.cpp:164:5)
//
module A // "b_mod.a_mod"
(
    output logic out,
    output logic p
);

// SystemC signals
logic s;
logic signed [31:0] sp;
logic signed [11:0] parr2[4];
logic [41:0] parrp[5];
logic signed [63:0] sl;

//------------------------------------------------------------------------------
// Method process: this_pointer (test_pointers.cpp:86:5) 

// Process-local variables
logic signed [31:0] m;
logic [2:0] u;

always_comb 
begin : this_pointer     // test_pointers.cpp:86:5
    m = 1;
    s = |(2 + m);
    u = 4 + s;
    sp = 5 + u;
    m = 6 + m;
    s = |(7 + m);
    u = 8 + s;
    sp = 9 + u;
end

//------------------------------------------------------------------------------
// Method process: this_pointer2 (test_pointers.cpp:99:5) 

always_comb 
begin : this_pointer2     // test_pointers.cpp:99:5
    integer i;
    i = sp + sp;
end

//------------------------------------------------------------------------------
// Method process: pointer_decl_init (test_pointers.cpp:104:5) 

// Process-local variables
logic [2:0] n;
logic signed [31:0] q;
logic signed [31:0] k;
logic [2:0] u1;

always_comb 
begin : pointer_decl_init     // test_pointers.cpp:104:5
    integer i;
    i = q + q;
    i = k;
    i = u1 - u1 + n;
    n = i + 1;
    i = n;
end

//------------------------------------------------------------------------------
// Method process: pointer_if (test_pointers.cpp:120:5) 

// Process-local variables
logic [2:0] l;

always_comb 
begin : pointer_if     // test_pointers.cpp:120:5
    if (0)
    begin
    end else begin
        l = 2;
    end
end

//------------------------------------------------------------------------------
// Method process: array_ptr1 (test_pointers.cpp:132:5) 

// Process-local variables
logic [11:0] parr1[4];

always_comb 
begin : array_ptr1     // test_pointers.cpp:132:5
    for (integer i = 0; i < 4; i++)
    begin
        parr1[i] = i;
    end
    for (integer i = 0; i < 4 - 1; i++)
    begin
        parr2[i] = 32'(parr1[i]);
    end
    parr2[4 - 1] = parr1[4 - 2] + parr1[4 - 1];
    parr2[sp] = 1;
end

//------------------------------------------------------------------------------
// Method process: array_ptr2 (test_pointers.cpp:146:5) 

always_comb 
begin : array_ptr2     // test_pointers.cpp:146:5
    for (integer i = 0; i < 4; i++)
    begin
        parrp[i] = 42'(parr2[i]);
    end
    for (integer i = 4; i < 5; i++)
    begin
        parrp[i] = 0;
    end
    sl = 32'(parrp[0] + parrp[parr2[0]]);
end

endmodule


