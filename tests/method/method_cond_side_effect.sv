//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.28
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;
logic b;
logic c;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b),
  .c(c)
);

endmodule



//==============================================================================
//
// Module: A (test_cond_side_effect.cpp:154:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b,
    output logic c
);

// Variables generated for SystemC signals

//------------------------------------------------------------------------------
// Method process: if_side_effect1 (test_cond_side_effect.cpp:48:5) 

// Process-local variables
logic signed [31:0] k;

always_comb 
begin : if_side_effect1     // test_cond_side_effect.cpp:48:5
    integer i;
    logic TMP_0;
    i = 0;
    // Call f() begin
    TMP_0 = |k;
    // Call f() end
    if (a && TMP_0)
    begin
        i = 1;
    end
    i = 2;
end

//------------------------------------------------------------------------------
// Method process: if_side_effect2 (test_cond_side_effect.cpp:57:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : if_side_effect2     // test_cond_side_effect.cpp:57:5
    integer i;
    i = 0;
    if (a && |(m++))
    begin
        i = m;
    end
    i = 2;
end

//------------------------------------------------------------------------------
// Method process: binary_side_effect (test_cond_side_effect.cpp:65:5) 

always_comb 
begin : binary_side_effect     // test_cond_side_effect.cpp:65:5
    integer i;
    logic b_1;
    i = 0;
    b_1 = a || |(i++);
    b_1 = a && |(i++);
    b_1 = 1;
    b_1 = 0 || |(i++);
    b_1 = 1 && |(i++);
    b_1 = 0;
end

//------------------------------------------------------------------------------
// Method process: binary_side_effect2 (test_cond_side_effect.cpp:86:5) 

always_comb 
begin : binary_side_effect2     // test_cond_side_effect.cpp:86:5
    integer i;
    logic b_1;
    i = 0;
    b_1 = |(i++) || a;
    b_1 = |(i++) && a;
    b_1 = 1;
    b_1 = 0;
    b_1 = a || |(i++) && 0;
end

//------------------------------------------------------------------------------
// Method process: cond_side_effect (test_cond_side_effect.cpp:105:5) 

always_comb 
begin : cond_side_effect     // test_cond_side_effect.cpp:105:5
    integer i;
    logic res;
    integer j;
    i = 3;
    res = b;
    j = 1;
    res = c;
end

//------------------------------------------------------------------------------
// Method process: cond_fcall (test_cond_side_effect.cpp:124:5) 

always_comb 
begin : cond_fcall     // test_cond_side_effect.cpp:124:5
    integer i;
    integer res;
    integer TMP_0;
    integer par;
    integer TMP_1;
    integer par_1;
    integer TMP_2;
    integer TMP_3;
    integer TMP_4;
    integer TMP_5;
    integer TMP_6;
    integer TMP_7;
    i = 3;
    par = 1;
    // Call g() begin
    TMP_0 = par;
    // Call g() end
    par_1 = 1;
    // Call h() begin
    TMP_1 = par_1 + 1;
    // Call h() end
    res = TMP_1;
    par_1 = 0;
    // Call h() begin
    TMP_2 = par_1 + 1;
    // Call h() end
    par = 0;
    // Call g() begin
    TMP_3 = par;
    // Call g() end
    res = a ? TMP_3 : TMP_2;
    par_1 = 1;
    // Call h() begin
    TMP_4 = par_1 + 1;
    // Call h() end
    res = 1;
    par_1 = 0;
    // Call h() begin
    TMP_5 = par_1 + 1;
    // Call h() end
    res = 1 + TMP_5;
    par_1 = 1;
    // Call h() begin
    TMP_6 = par_1 + 1;
    // Call h() end
    par_1 = 3;
    // Call h() begin
    TMP_7 = par_1 + 1;
    // Call h() end
    res = TMP_7;
end

//------------------------------------------------------------------------------
// Method process: binary_unary_fcall (test_cond_side_effect.cpp:135:5) 

always_comb 
begin : binary_unary_fcall     // test_cond_side_effect.cpp:135:5
    integer res;
    integer TMP_0;
    integer par;
    integer TMP_1;
    integer TMP_2;
    integer TMP_3;
    integer TMP_4;
    integer TMP_5;
    integer TMP_6;
    integer TMP_7;
    par = 1;
    // Call h() begin
    TMP_0 = par + 1;
    // Call h() end
    par = 2;
    // Call h() begin
    TMP_1 = par + 1;
    // Call h() end
    res = TMP_0 + TMP_1;
    par = 0;
    // Call h() begin
    TMP_2 = par + 1;
    // Call h() end
    res = -TMP_2;
    par = 1;
    // Call h() begin
    TMP_3 = par + 1;
    // Call h() end
    res = TMP_3;
    par = 1;
    // Call h() begin
    TMP_4 = par + 1;
    // Call h() end
    res = 32'(TMP_4);
    par = 2;
    // Call h() begin
    TMP_5 = par + 1;
    // Call h() end
    par = 1;
    // Call h() begin
    TMP_6 = par + 1;
    // Call h() end
    res = a ? TMP_6 : TMP_5;
    par = 2;
    // Call h() begin
    TMP_7 = par + 1;
    // Call h() end
    res = 4'(TMP_7);
end

endmodule


