//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
);

// SystemC signals

//------------------------------------------------------------------------------
// Method process: and_reduce1 (test_unary_sc.cpp:42:5) 

always_comb 
begin : and_reduce1     // test_unary_sc.cpp:42:5
    logic [3:0] x1;
    logic [7:0] x2;
    logic [7:0] x3;
    logic l1;
    logic l2;
    x1 = 'hC;
    assert (~&x1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (~&x1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x2 = 'hFF;
    x3 = 'hFA;
    l1 = &x1;
    l2 = ~&x2;
    assert (!l1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (!l2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (&x2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (~&x3) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
end

//------------------------------------------------------------------------------
// Method process: or_reduce1 (test_unary_sc.cpp:58:5) 

always_comb 
begin : or_reduce1     // test_unary_sc.cpp:58:5
    logic [3:0] x1;
    logic [7:0] x2;
    logic [7:0] x3;
    logic l1;
    logic l2;
    logic l3;
    logic l4;
    logic l5;
    integer i;
    x1 = 'hC;
    assert (!~|x1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (!~|x1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x2 = 0;
    x3 = 'h10;
    l1 = |x1;
    l2 = ~|x2;
    assert (l1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (l2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (!(|x2)) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (!~|x3) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    l3 = 1'(x2);
    l4 = |2'(l3);
    l5 = |2'(1'(x2));
    l5 = 1'(x2);
    l5 = 1'(|2'(x2));
    i = 1;
    i = ~|4'(1'(x1) + x2) && 1;
    i = 1 && ~|1'(x1++);
    i = 0;
    i = 1;
end

//------------------------------------------------------------------------------
// Method process: xor_reduce1 (test_unary_sc.cpp:87:6) 

always_comb 
begin : xor_reduce1     // test_unary_sc.cpp:87:6
    logic [3:0] x1;
    logic [7:0] x2;
    logic l1;
    logic l2;
    x1 = 1;
    x2 = 0;
    assert (^x1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (!~^x1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    l1 = ^x2;
    l2 = ~^x2;
    assert (!l1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    assert (l2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
end

//------------------------------------------------------------------------------
// Method process: sc_types_exclaim (test_unary_sc.cpp:100:5) 

always_comb 
begin : sc_types_exclaim     // test_unary_sc.cpp:100:5
    logic [2:0] x;
    logic b_1;
    x = 1;
    b_1 = |x;
    assert (b_1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x = 0;
    assert (!(|x)) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    b_1 = 1;
    b_1 = !(|x) && |x;
end

//------------------------------------------------------------------------------
// Method process: sc_types_inc_dec (test_unary_sc.cpp:116:5) 

always_comb 
begin : sc_types_inc_dec     // test_unary_sc.cpp:116:5
    logic [2:0] x;
    x = 1;
    x++;
    assert (x == 2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    ++x;
    assert (x == 3) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    --x;
    assert (x == 2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x--;
    assert (x == 1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
end

//------------------------------------------------------------------------------
// Method process: sc_types_comp_assign (test_unary_sc.cpp:128:5) 

always_comb 
begin : sc_types_comp_assign     // test_unary_sc.cpp:128:5
    logic [2:0] x;
    logic signed [7:0] y;
    x = 1;
    x = x + 2;
    assert (x == 3) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    y = 2;
    y = y - signed'({1'b0, x});
    assert (y == -2'sd1) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    y = y + signed'({1'b0, x});
    assert (y == 2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    y = y * signed'({1'b0, x});
    assert (y == 6) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    y = -2'sd1;
    x = x + y;
    assert (x == 2) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x = x + (y + 2);
    assert (x == 3) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x = x + x;
    x = x + 2;
end

//------------------------------------------------------------------------------
// Method process: sc_to_int (test_unary_sc.cpp:149:5) 

always_comb 
begin : sc_to_int     // test_unary_sc.cpp:149:5
    logic [65:0] x;
    integer i;
    integer unsigned u;
    logic [63:0] ul;
    logic signed [63:0] l;
    x = 15;
    i = 32'(x);
    assert (i == 15) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x = -5'sd10;
    i = 64'(x);
    assert (i == -5'sd10) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x = 12;
    u = 32'(x);
    assert (u == 12) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x = 11;
    u = 64'(x);
    assert (u == 11) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    ul = 64'(x);
    assert (ul == 11) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
    x = -6'sd20;
    l = 64'(x);
    assert (l == -6'sd20) else $error("Assertion failed at test_unary_sc.cpp:40:24>");
end

endmodule


