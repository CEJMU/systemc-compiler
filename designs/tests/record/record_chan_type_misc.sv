//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.53
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic clk,
    input logic in_a,
    input logic signed [31:0] in_b,
    output logic out_a,
    output logic signed [31:0] out_b
);

// Variables generated for SystemC signals
logic nrst;
logic [31:0] s;
logic sim_a;
logic signed [31:0] sim_b;
logic rim_a;
logic signed [31:0] rim_b;
logic [11:0] aim_b;
logic [19:0] aim_c[3];

//------------------------------------------------------------------------------
// Method process: callSignalParam (test_chan_type_misc.cpp:106:5) 

always_comb 
begin : callSignalParam     // test_chan_type_misc.cpp:106:5
    logic a_a;
    integer a_b;
    logic a_a_1;
    integer a_b_1;
    a_b = 'h42;
    a_a = sim_a; a_b = sim_b;
    // Call put() begin
    a_b_1 = 'h42;
    a_a_1 = sim_a; a_b_1 = sim_b;
    // Call put() end
end

//------------------------------------------------------------------------------
// Method process: recordRefDecl (test_chan_type_misc.cpp:118:5) 

always_comb 
begin : recordRefDecl     // test_chan_type_misc.cpp:118:5
    logic ss_a;
    integer ss_b;
    logic ll1_a;
    integer ll1_b;
    logic ll2_a;
    integer ll2_b;
    ss_b = 'h42;
    ll1_a = ss_a; ll1_b = ss_b;
    ll2_b = 'h42;
    ll2_a = ss_a; ll2_b = ss_b;
end

//------------------------------------------------------------------------------
// Clocked THREAD: recordDeclUseDef (test_chan_type_misc.cpp:125:5) 

// Thread-local variables
logic signed [31:0] i;
logic signed [31:0] i_next;
logic [1:0] recordDeclUseDef_PROC_STATE;
logic [1:0] recordDeclUseDef_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : recordDeclUseDef_comb     // test_chan_type_misc.cpp:125:5
    recordDeclUseDef_func;
end
function void recordDeclUseDef_func;
    integer par;
    logic a_a;
    integer a_b;
    i_next = i;
    recordDeclUseDef_PROC_STATE_next = recordDeclUseDef_PROC_STATE;
    
    case (recordDeclUseDef_PROC_STATE)
        0: begin
            par = i_next;
            a_b = par;
            // Call Simple() begin
            a_a = 0;
            // Call Simple() end
            recordDeclUseDef_PROC_STATE_next = 1; return;    // test_chan_type_misc.cpp:130:9;
        end
        1: begin
            recordDeclUseDef_PROC_STATE_next = 2; return;    // test_chan_type_misc.cpp:133:13;
        end
        2: begin
            recordDeclUseDef_PROC_STATE_next = 2; return;    // test_chan_type_misc.cpp:133:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : recordDeclUseDef_ff
    if ( ~nrst ) begin
        i <= 42;
        recordDeclUseDef_PROC_STATE <= 0;    // test_chan_type_misc.cpp:127:9;
    end
    else begin
        i <= i_next;
        recordDeclUseDef_PROC_STATE <= recordDeclUseDef_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: localVarInRst (test_chan_type_misc.cpp:137:5) 

// Thread-local variables
logic s_a;
logic s_a_next;
logic [1:0] localVarInRst_PROC_STATE;
logic [1:0] localVarInRst_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : localVarInRst_comb     // test_chan_type_misc.cpp:137:5
    localVarInRst_func;
end
function void localVarInRst_func;
    integer s_b;
    logic a_a;
    integer a_b;
    s_a_next = s_a;
    localVarInRst_PROC_STATE_next = localVarInRst_PROC_STATE;
    
    case (localVarInRst_PROC_STATE)
        0: begin
            s_b = 43;
            a_b = 'h42;
            a_a = s_a_next; a_b = s_b;
            localVarInRst_PROC_STATE_next = 1; return;    // test_chan_type_misc.cpp:145:9;
        end
        1: begin
            localVarInRst_PROC_STATE_next = 2; return;    // test_chan_type_misc.cpp:148:13;
        end
        2: begin
            localVarInRst_PROC_STATE_next = 2; return;    // test_chan_type_misc.cpp:148:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : localVarInRst_ff
    if ( ~nrst ) begin
        integer s_b;
        s_b = 'h42;
        localVarInRst_PROC_STATE <= 0;    // test_chan_type_misc.cpp:139:9;
    end
    else begin
        s_a <= s_a_next;
        localVarInRst_PROC_STATE <= localVarInRst_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Method process: copyCtor (test_chan_type_misc.cpp:154:5) 

always_comb 
begin : copyCtor     // test_chan_type_misc.cpp:154:5
    integer unsigned j;
    logic ss_a;
    integer ss_b;
    logic tt_a;
    integer tt_b;
    logic [11:0] aa_b;
    logic [19:0] aa_c[3];
    j = s;
    ss_a = sim_a; ss_b = sim_b;
    tt_a = sim_a; tt_b = sim_b;
    ss_a = tt_a; ss_b = tt_b;
    aa_b = aim_b; aa_c = aim_c;
    ss_b = aa_b;
    ss_b = aa_c[1];
    tt_b = aa_c[j];
end

//------------------------------------------------------------------------------
// Method process: funcReturn (test_chan_type_misc.cpp:181:5) 

always_comb 
begin : funcReturn     // test_chan_type_misc.cpp:181:5
    logic ss_a;
    integer ss_b;
    logic ll_a;
    integer ll_b;
    logic TMP_0_a;
    integer TMP_0_b;
    logic TMP_1_a;
    integer TMP_1_b;
    logic TMP_2_a;
    integer TMP_2_b;
    logic TMP_3_a;
    integer TMP_3_b;
    logic rr_a;
    integer rr_b;
    logic TMP_4_a;
    integer TMP_4_b;
    ss_b = 'h42;
    // Call returnRec() begin
    ll_b = 'h42;
    TMP_0_a = ll_a; TMP_0_b = ll_b;
    // Call returnRec() end
    ss_a = TMP_0_a; ss_b = TMP_0_b;
    // Call returnSigRec() begin
    TMP_1_a = sim_a; TMP_1_b = sim_b;
    // Call returnSigRec() end
    ss_a = TMP_1_a; ss_b = TMP_1_b;
    // Call returnSigRec2() begin
    TMP_2_a = sim_a; TMP_2_b = sim_b;
    // Call returnSigRec2() end
    ss_a = TMP_2_a; ss_b = TMP_2_b;
    // Call returnRec() begin
    ll_b = 'h42;
    TMP_3_a = ll_a; TMP_3_b = ll_b;
    // Call returnRec() end
    rr_a = TMP_3_a; rr_b = TMP_3_b;
    // Call returnSigRec() begin
    TMP_4_a = sim_a; TMP_4_b = sim_b;
    // Call returnSigRec() end
    rim_a = TMP_4_a; rim_b = TMP_4_b;
end

endmodule


